<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北郊獨語 - Yoxem&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/fafc36f9ad9550105fc8e295fb570919</icon>
  <subtitle>溪埔的石仔、山嶺的果樹之間，version 3.0</subtitle>
  <link href="http://yoxem.github.io/atom.xml" rel="self"/>
  
  <link href="http://yoxem.github.io/"/>
  <updated>2023-07-27T15:17:20.500Z</updated>
  <id>http://yoxem.github.io/</id>
  
  <author>
    <name>Yoxem Chen</name>
    <email>chenjt30@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 A2hosting 用 AppImage deploy Rust rocket 這個 framework 的 app</title>
    <link href="http://yoxem.github.io/2023/07/27/ti-a2hosting-deploy-rust-rocket-app-ing-imageapp/"/>
    <id>http://yoxem.github.io/2023/07/27/ti-a2hosting-deploy-rust-rocket-app-ing-imageapp/</id>
    <published>2023-07-27T15:12:20.000Z</published>
    <updated>2023-07-27T15:17:20.500Z</updated>
    
    <content type="html"><![CDATA[<p>Rust 的 Rocket 是一個後端框架 (framework)。除了有靜態型別語言的好處（比如減少runtime error）外，還有一個binary檔包全部，免除裝其他太多 library 或是框架 library 的問題。</p><p>因為自己的是網路租用的A2 site hosting 空間(Linux)，想說為了物盡其用，所以想要把產生的 web app binary 放在上面執行，但想當然爾，還是缺相依性（空間提供的函式庫版本太舊）。後來想，既然 AppImage 可以包一個執行檔的諸多相依軟體或是函式庫，為何不用之包呢？</p><p>以下以放在 <code>/path/to/exampleapp</code> 這個 app 為例，講述我 deploy 的方法。<span id="more"></span></p><h2 id="製作原始二進位檔-binary-file"><a href="#製作原始二進位檔-binary-file" class="headerlink" title="製作原始二進位檔 (binary file)"></a>製作原始二進位檔 (binary file)</h2><p>進入 <code>/path/to/exampleapp</code>，輸入下列 Linux 指令，編譯可執行檔：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cargo +nightly build --release <span class="comment"># 假設app需要 nightly 的 rust 版本</span></span><br><span class="line"></span><br><span class="line">cargo +nightly run --release</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最後應該會在<code>/path/to/exampleapp/target/release</code>找到<code>taikoothong</code>。</p><h2 id="複製到-AppDir"><a href="#複製到-AppDir" class="headerlink" title="複製到 AppDir"></a>複製到 AppDir</h2><p>創立新的<code>/path/to/AppDir</code>，然後把<code>exampleapp</code>複製到這裡：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /path/to/AppDir</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> /path/to/exampleapp/target/release/exampleapp /path/to/AppDir</span><br></pre></td></tr></table></figure><h2 id="安裝appimage"><a href="#安裝appimage" class="headerlink" title="安裝appimage"></a>安裝appimage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x appimage-builder-x86_64.AppImage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">mv</span> appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder <span class="comment">#可以自己另外指定安裝目錄</span></span><br></pre></td></tr></table></figure><h2 id="打包appimage"><a href="#打包appimage" class="headerlink" title="打包appimage"></a>打包appimage</h2><p>進去<code>/path/to/</code>，產生appimage 的打包設定檔，依指示設定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to</span><br><span class="line"></span><br><span class="line">appimage-builder --generate</span><br><span class="line"></span><br><span class="line">&gt; Basic Information :</span><br><span class="line">&gt; ? ID [Eg: com.example.app] : com.example.exampleapp</span><br><span class="line">&gt; ? Application Name : Example</span><br><span class="line">&gt; ? Icon : （直接依照預設值，按enter就好）</span><br><span class="line">&gt; ? Version : 0.0.0</span><br><span class="line">&gt; ? Executable path relative to AppDir [usr/bin/app] : exampleapp （執行檔在目錄裡面的相對位置）</span><br><span class="line">&gt; ? Arguments [Default: <span class="variable">$@</span>] : <span class="variable">$@</span></span><br><span class="line">&gt; ? Update Information [Default: guess] : guess</span><br><span class="line">&gt; ? Architecture :  amd64（請依照平臺所屬的 CPU 架構修改）</span><br></pre></td></tr></table></figure><p>最後生成 <code>/path/to/AppImageBuilder.yml</code>，檢視裡面的設定有沒有問題，刪除不必要的<code>sourceline</code>內項目，增加必要的<code>include</code>內 ubuntu 套件等等。</p><p>最後輸入指令打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appimage-builder --recipe AppImageBuilder.yml</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> Example-0.0.0-x86_64.AppImage Example <span class="comment">#把可執行檔包起來</span></span><br><span class="line"><span class="built_in">cp</span> /path/to/exampleapp/templates -r . <span class="comment">#把templates複製過來，如果有其他的檔案一併複製</span></span><br><span class="line"></span><br><span class="line">tar -zcf  examplearchive.tar  templates  Example <span class="comment"># 有其他檔案也要包起來</span></span><br></pre></td></tr></table></figure><p>然後把 <code>examplearchive.tar</code> 上傳到site-hosting</p><h2 id="解壓縮然後執行"><a href="#解壓縮然後執行" class="headerlink" title="解壓縮然後執行"></a>解壓縮然後執行</h2><p>因為我的 site-hosting 空間不支援 Linux 的 FUSE，所以在遠端的 site-hosting 空間需要解壓縮AppImage裡面的檔案，然後執行裡面的可執行檔：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/archive <span class="comment">#進去 examplearchive.tar 所在的目錄</span></span><br><span class="line"></span><br><span class="line">tar -xvf examplearchive.tar</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> examplearchive</span><br><span class="line"></span><br><span class="line">./Example --appimage-extract</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> squashfs-root</span><br><span class="line"></span><br><span class="line"><span class="built_in">nohup</span> ./AppRun &amp; 執行app，用 <span class="built_in">nohup</span> 確保app在離線後繼續執行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 預設會於 http://127.0.0.1:8000/ 執行</span></span><br></pre></td></tr></table></figure><h2 id="修改-htaccess"><a href="#修改-htaccess" class="headerlink" title="修改 .htaccess"></a>修改 .htaccess</h2><p>因為a2hosting使用 .htaccess 轉網頁地址假設我們要把 <code>我的網址/example</code>和其下的網頁，轉址到 app 的 <code>http://127.0.0.1:8000/</code>處理，參考 a2hosting 建議的方式設置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line"></span><br><span class="line">DirectoryIndex disabled</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteRule ^example$ http://127.0.0.1:8000/ [P,L]</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule ^example/(.*)$ http://127.0.0.1:8000/$1 [P,L]</span><br></pre></td></tr></table></figure><p>這樣打<code>我的網址/example</code>就能進入自己的app了。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://render.com/docs/deploy-rocket-rust">Deploy a Rust Web App with Rocket</a></li><li><a href="https://appimage-builder.readthedocs.io/en/latest/intro/install.html">https://appimage-builder.readthedocs.io/en/latest/intro/install.html</a></li><li><a href="https://appimage-builder.readthedocs.io/en/latest/intro/tutorial.html">https://appimage-builder.readthedocs.io/en/latest/intro/tutorial.html</a></li><li><a href="https://www.a2hosting.com/kb/installable-applications/manual-installations/installing-node-js-on-managed-hosting-accounts/">How to install and configure Node.js on managed hosting accounts</a></li><li><a href="https://github.com/AppImage/AppImageKit/wiki/FUSE">https://github.com/AppImage/AppImageKit/wiki/FUSE</a></li></ul><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rust 的 Rocket 是一個後端框架 (framework)。除了有靜態型別語言的好處（比如減少runtime error）外，還有一個binary檔包全部，免除裝其他太多 library 或是框架 library 的問題。&lt;/p&gt;
&lt;p&gt;因為自己的是網路租用的A2 site hosting 空間(Linux)，想說為了物盡其用，所以想要把產生的 web app binary 放在上面執行，但想當然爾，還是缺相依性（空間提供的函式庫版本太舊）。後來想，既然 AppImage 可以包一個執行檔的諸多相依軟體或是函式庫，為何不用之包呢？&lt;/p&gt;
&lt;p&gt;以下以放在 &lt;code&gt;/path/to/exampleapp&lt;/code&gt; 這個 app 為例，講述我 deploy 的方法。</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="資訊" scheme="http://yoxem.github.io/tags/%E8%B3%87%E8%A8%8A/"/>
    
    <category term="Rust" scheme="http://yoxem.github.io/tags/Rust/"/>
    
    <category term="Appimage" scheme="http://yoxem.github.io/tags/Appimage/"/>
    
    <category term="Rocket" scheme="http://yoxem.github.io/tags/Rocket/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX斷行演算法</title>
    <link href="http://yoxem.github.io/2023/07/23/latex-tng-tsua-ian-sng-huat/"/>
    <id>http://yoxem.github.io/2023/07/23/latex-tng-tsua-ian-sng-huat/</id>
    <published>2023-07-23T14:24:14.000Z</published>
    <updated>2023-07-23T15:02:17.129Z</updated>
    
    <content type="html"><![CDATA[<p>以下內容係參考網路上找到的LaTeX斷行演算法，加上一些修改而成。</p><p>使用程式筆記本的.ipynb檔撰寫，語言是OCaml，授權為MIT License。載點：</p><ul><li><a href="/2023/07/23/latex-tng-tsua-ian-sng-huat/linebreak.ipynb" title="[ipynb 檔]">[ipynb 檔]</a></li><li><a href="/2023/07/23/latex-tng-tsua-ian-sng-huat/linebreak.pdf" title="[PDF 檔]">[PDF 檔]</a></li></ul><p>以下是程式筆記本檔內文：</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*有關於LaTeX使用於斷行的演算法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">首先我們要制定一個字元（包含斷行後新生的連字號，以及空白）在斷行前、斷行後的寬度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*)</span></span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*假設這段字元 word segment list = wordSegList，SP表達半形空白，HY表達連字號*)</span></span><br><span class="line"><span class="keyword">let</span> wordSegList = [<span class="string">&quot;no&quot;</span>; <span class="string">&quot;HY&quot;</span>; <span class="string">&quot;thing&quot;</span>; <span class="string">&quot;SP&quot;</span>; <span class="string">&quot;can&quot;</span>; <span class="string">&quot;SP&quot;</span>; <span class="string">&quot;stop&quot;</span>;<span class="string">&quot;SP&quot;</span>; <span class="string">&quot;the&quot;</span>; <span class="string">&quot;SP&quot;</span>; <span class="string">&quot;cro&quot;</span>; <span class="string">&quot;HY&quot;</span>; <span class="string">&quot;co&quot;</span>;<span class="string">&quot;HY&quot;</span> ;<span class="string">&quot;dile&quot;</span>; <span class="string">&quot;cross&quot;</span>; <span class="string">&quot;SP&quot;</span>; <span class="string">&quot;it.&quot;</span>] ;;</span><br></pre></td></tr></table></figure><pre><code>val wordSegList : string list =  [&quot;no&quot;; &quot;HY&quot;; &quot;thing&quot;; &quot;SP&quot;; &quot;can&quot;; &quot;SP&quot;; &quot;stop&quot;; &quot;SP&quot;; &quot;the&quot;; &quot;SP&quot;; &quot;cro&quot;;   &quot;HY&quot;; &quot;co&quot;; &quot;HY&quot;; &quot;dile&quot;; &quot;cross&quot;; &quot;SP&quot;; &quot;it.&quot;]</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*現在轉成每個word segment都附帶長度的格式*)</span></span><br><span class="line"><span class="comment">(* sg: 文段 segment</span></span><br><span class="line"><span class="comment">ow : original width 原來的寬度 </span></span><br><span class="line"><span class="comment">hw : hyphenated width 該處指定為斷字後的寬度*)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> segment_with_length = &#123; sg: <span class="built_in">string</span>; ow: <span class="built_in">float</span>; hw: <span class="built_in">float</span>&#125;</span><br></pre></td></tr></table></figure><pre><code>type segment_with_length = &#123; sg : string; ow : float; hw : float; &#125;</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* 每個segment之長度*)</span></span><br><span class="line"><span class="keyword">let</span> segOwList = <span class="type">List</span>.map (<span class="keyword">fun</span> x -&gt; <span class="keyword">match</span> x <span class="keyword">with</span></span><br><span class="line">                            | <span class="string">&quot;SP&quot;</span> -&gt; <span class="number">1.0</span>  <span class="comment">(*SP 通常寬度為1*)</span></span><br><span class="line">                            | <span class="string">&quot;HY&quot;</span> -&gt; <span class="number">0.0</span> <span class="comment">(*HY 連字點寬度為0*)</span></span><br><span class="line">                            | _ -&gt; float_of_int (<span class="type">String</span>.length x))    <span class="comment">(*以chars的長度來當做文字寬度 假設是等寬半形字元*)</span></span><br><span class="line">                                      wordSegList</span><br><span class="line">                                    </span><br></pre></td></tr></table></figure><pre><code>val segOwList : float list =  [2.; 0.; 5.; 1.; 3.; 1.; 4.; 1.; 3.; 1.; 3.; 0.; 2.; 0.; 4.; 5.; 1.; 3.]</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*每個segment在其被斷行時的長度 *)</span></span><br><span class="line"><span class="keyword">let</span> segHwList = <span class="type">List</span>.map (<span class="keyword">fun</span> x -&gt; <span class="keyword">match</span> x <span class="keyword">with</span></span><br><span class="line">                            | <span class="string">&quot;SP&quot;</span> -&gt; <span class="number">0.0</span>  <span class="comment">(*SP 通常斷行後寬度為0*)</span></span><br><span class="line">                            | <span class="string">&quot;HY&quot;</span> -&gt; <span class="number">1.0</span> <span class="comment">(*HY 連字點斷行後為1*)</span></span><br><span class="line">                            | _ -&gt; infinity)<span class="comment">(*不可能斷行的地方，寬度設做0*)</span></span><br><span class="line">                                      wordSegList</span><br></pre></td></tr></table></figure><pre><code>val segHwList : float list =  [infinity; 1.; infinity; 0.; infinity; 0.; infinity; 0.; infinity; 0.;   infinity; 1.; infinity; 1.; infinity; infinity; 0.; infinity]</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*3個列表組合 zip 在一起*)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> segListCombined = <span class="type">List</span>.combine (<span class="type">List</span>.combine wordSegList segOwList) segHwList;;</span><br><span class="line"></span><br><span class="line"><span class="comment">(*然後變成type segment_with_length的列表*)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> segWithLengthList = <span class="type">List</span>.map (<span class="keyword">fun</span> i -&gt; <span class="keyword">match</span> i <span class="keyword">with</span></span><br><span class="line">                                  | ((sg,ow),hw) -&gt; &#123;sg = sg; ow = ow; hw = hw&#125;) segListCombined</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>val segListCombined : ((string * float) * float) list =  [((&quot;no&quot;, 2.), infinity); ((&quot;HY&quot;, 0.), 1.); ((&quot;thing&quot;, 5.), infinity);   ((&quot;SP&quot;, 1.), 0.); ((&quot;can&quot;, 3.), infinity); ((&quot;SP&quot;, 1.), 0.);   ((&quot;stop&quot;, 4.), infinity); ((&quot;SP&quot;, 1.), 0.); ((&quot;the&quot;, 3.), infinity);   ((&quot;SP&quot;, 1.), 0.); ((&quot;cro&quot;, 3.), infinity); ((&quot;HY&quot;, 0.), 1.);   ((&quot;co&quot;, 2.), infinity); ((&quot;HY&quot;, 0.), 1.); ((&quot;dile&quot;, 4.), infinity);   ((&quot;cross&quot;, 5.), infinity); ((&quot;SP&quot;, 1.), 0.); ((&quot;it.&quot;, 3.), infinity)]val segWithLengthList : segment_with_length list =  [&#123;sg = &quot;no&quot;; ow = 2.; hw = infinity&#125;; &#123;sg = &quot;HY&quot;; ow = 0.; hw = 1.&#125;;   &#123;sg = &quot;thing&quot;; ow = 5.; hw = infinity&#125;; &#123;sg = &quot;SP&quot;; ow = 1.; hw = 0.&#125;;   &#123;sg = &quot;can&quot;; ow = 3.; hw = infinity&#125;; &#123;sg = &quot;SP&quot;; ow = 1.; hw = 0.&#125;;   &#123;sg = &quot;stop&quot;; ow = 4.; hw = infinity&#125;; &#123;sg = &quot;SP&quot;; ow = 1.; hw = 0.&#125;;   &#123;sg = &quot;the&quot;; ow = 3.; hw = infinity&#125;; &#123;sg = &quot;SP&quot;; ow = 1.; hw = 0.&#125;;   &#123;sg = &quot;cro&quot;; ow = 3.; hw = infinity&#125;; &#123;sg = &quot;HY&quot;; ow = 0.; hw = 1.&#125;;   &#123;sg = &quot;co&quot;; ow = 2.; hw = infinity&#125;; &#123;sg = &quot;HY&quot;; ow = 0.; hw = 1.&#125;;   &#123;sg = &quot;dile&quot;; ow = 4.; hw = infinity&#125;;   &#123;sg = &quot;cross&quot;; ow = 5.; hw = infinity&#125;; &#123;sg = &quot;SP&quot;; ow = 1.; hw = 0.&#125;;   &#123;sg = &quot;it.&quot;; ow = 3.; hw = infinity&#125;]</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*</span></span><br><span class="line"><span class="comment">我們可以定義在第 n 處斷行=&gt;除了斷行點以外的文字消失，的成本函數 cost(n)，成本函數越小越好。</span></span><br><span class="line"><span class="comment">這時後需要用動態規劃解決。</span></span><br><span class="line"><span class="comment">badness (k, n)是指k~n-1處若塞於一行，且n處斷行時的懲罰函數（等下介紹），越小越好</span></span><br><span class="line"><span class="comment">cost(n) = baness(0,n) 若其為有限，否則 min of k in 0...n-1 of badness(k, n) + cost(k)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">懲罰函數badness定義是：若lineWidth &gt;= widthBetween(a,b)，則為二者之差的三次方，否則是無限大。</span></span><br><span class="line"><span class="comment">k &gt;= n</span></span><br><span class="line"><span class="comment">badness(k, n) =  (lineWidth - widthBetween(k, n) )^3 if lineWidth &gt;= widthBetween(k+1, n)</span></span><br><span class="line"><span class="comment">                infinity                              elsewhere</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">widthBetween(a,b)係指 a到b 塞在一行時的寬度</span></span><br><span class="line"><span class="comment">widthBetween(a,b) = hw[b] + (sum&#123;i=a...b-1&#125; of ow[i]</span></span><br><span class="line"><span class="comment">*)</span></span><br><span class="line"><span class="keyword">open</span> <span class="type">Printf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lineWidth = <span class="number">12.0</span>;; <span class="comment">(*一行最大寬度*)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> widthBetween a b = <span class="keyword">if</span> a&gt; b <span class="keyword">then</span> raise (<span class="type">Failure</span> <span class="string">&quot;Exception: widthBetween a b, a &lt;=b &quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> (<span class="type">List</span>.nth segWithLengthList b).hw +. (sumOfOw a (b-<span class="number">1</span>) segWithLengthList);;</span><br><span class="line"><span class="keyword">let</span> badness k n = <span class="keyword">let</span> remainedSpaceWidth = lineWidth -. (widthBetween k n) <span class="keyword">in</span></span><br><span class="line">                      <span class="keyword">if</span> remainedSpaceWidth &gt;= <span class="number">0.</span> <span class="keyword">then</span></span><br><span class="line">                          remainedSpaceWidth ** <span class="number">3.</span></span><br><span class="line">                          <span class="keyword">else</span> infinity;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> minIndex = <span class="built_in">ref</span> <span class="number">0</span>;; <span class="comment">(*cost(x)發生的最小的k)值*)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">(*動態規劃存放 (min cost, 其中的 k 滿足 min cost) 之處*)</span></span><br><span class="line"><span class="comment">(*格式： n (minValue, minIndex) *)</span></span><br><span class="line"><span class="keyword">let</span> costKStorage = <span class="type">Hashtbl</span>.create <span class="number">10</span>;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> cost n =</span><br><span class="line">    <span class="keyword">if</span> <span class="type">Hashtbl</span>.mem costKStorage n <span class="keyword">then</span> <span class="comment">(*若是已經存儲了，即用裡面的值，避免重複運算*)</span></span><br><span class="line">        <span class="keyword">let</span> (minValue, minIndex) = <span class="type">Hashtbl</span>.find costKStorage n <span class="keyword">in</span></span><br><span class="line">        minValue</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (badness <span class="number">0</span> n) &lt; infinity <span class="keyword">then</span> (badness <span class="number">0</span> n)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">let</span> compareList = <span class="type">List</span>.init n (<span class="keyword">fun</span> k -&gt; (badness k n) +. cost k) <span class="keyword">in</span></span><br><span class="line">        <span class="comment">(*找最小值*)</span></span><br><span class="line">        <span class="keyword">let</span> findMin lst = <span class="type">List</span>.fold_left min infinity lst <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> minValue = findMin compareList <span class="keyword">in</span> <span class="comment">(*最小值*)</span></span><br><span class="line">        <span class="comment">(*找最小值所在的索引index值*)</span></span><br><span class="line">        <span class="keyword">let</span> findMinIndex lst = <span class="type">List</span>.fold_left</span><br><span class="line">                                    (<span class="keyword">fun</span> pos i -&gt; <span class="keyword">if</span> (<span class="type">List</span>.nth lst i) == minValue <span class="keyword">then</span> i <span class="keyword">else</span> pos)</span><br><span class="line">                                    (-<span class="number">1</span>)</span><br><span class="line">                                    (<span class="type">List</span>.init (<span class="type">List</span>.length lst) (<span class="keyword">fun</span> x -&gt; x)) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> minIndex = findMinIndex compareList <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> _ =  <span class="type">Hashtbl</span>.add costKStorage n (minValue, minIndex) <span class="keyword">in</span></span><br><span class="line">        minValue;;</span><br></pre></td></tr></table></figure><pre><code>val lineWidth : float = 12.val widthBetween : int -&gt; int -&gt; float = &lt;fun&gt;val badness : int -&gt; int -&gt; float = &lt;fun&gt;val minIndex : int ref = &#123;contents = 0&#125;val costKStorage : (&#39;_weak11, &#39;_weak12) Hashtbl.t = &lt;abstr&gt;val cost : int -&gt; float = &lt;fun&gt;</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*sumOfOw : 上文的(sum&#123;i=a...b&#125; of ow[i]*)</span></span><br><span class="line"><span class="comment">(* sumOfOwAux：輔助函數*)</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> sumOfOwAux i start final sum <span class="built_in">list</span> =</span><br><span class="line"><span class="keyword">if</span> i &lt; start <span class="keyword">then</span> sumOfOwAux (i+<span class="number">1</span>) start final sum <span class="built_in">list</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i&gt;= start &amp;&amp; i &lt;= final) <span class="keyword">then</span> sumOfOwAux (i+<span class="number">1</span>) start final (sum +. (<span class="type">List</span>.nth <span class="built_in">list</span> i).ow) <span class="built_in">list</span></span><br><span class="line"><span class="keyword">else</span> sum ;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sumOfOw start final <span class="built_in">list</span> = sumOfOwAux <span class="number">0</span> start final <span class="number">0.0</span> <span class="built_in">list</span>;;</span><br></pre></td></tr></table></figure><pre><code>val sumOfOwAux :  int -&gt; int -&gt; int -&gt; float -&gt; segment_with_length list -&gt; float = &lt;fun&gt;val sumOfOw : int -&gt; int -&gt; segment_with_length list -&gt; float = &lt;fun&gt;</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*算到第11之處的成本*)</span></span><br><span class="line"><span class="comment">(*結果</span></span><br><span class="line"><span class="comment">no thing</span></span><br><span class="line"><span class="comment">can stop</span></span><br><span class="line"><span class="comment">crocodile</span></span><br><span class="line"><span class="comment">...........^</span></span><br><span class="line"><span class="comment">最多只能塞到箭頭處*)</span></span><br><span class="line">cost <span class="number">11</span>;;</span><br></pre></td></tr></table></figure><pre><code>- : float = 179.</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*找 costKStorage 目前的值*)</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">ref</span> <span class="string">&quot;&quot;</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> _ = (<span class="type">Hashtbl</span>.iter (<span class="keyword">fun</span> x y -&gt; <span class="keyword">let</span> (y1,y2) = y <span class="keyword">in</span> a := !a ^ (sprintf <span class="string">&quot;%d : %f %d\n&quot;</span> x y1 y2))  costKStorage) <span class="keyword">in</span> !a;;</span><br></pre></td></tr></table></figure><pre><code>- : string =&quot;6 : inf -1\n2 : inf -1\n8 : inf -1\n7 : 152.000000 3\n13 : 153.000000 7\n12 : inf -1\n4 : inf -1\n9 : 28.000000 5\n11 : 179.000000 7\n0 : inf -1\n10 : inf -1\n&quot;</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*找出每個斷行點，回溯的搜尋HashTable*)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">rec</span> findBreakPointAux res k =</span><br><span class="line"><span class="keyword">if</span> <span class="type">Hashtbl</span>.mem costKStorage k <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">let</span> (minValue, minIndex) = <span class="type">Hashtbl</span>.find costKStorage k <span class="keyword">in</span></span><br><span class="line">    findBreakPointAux (<span class="type">List</span>.append res [k]) minIndex</span><br><span class="line">  <span class="keyword">else</span> (<span class="type">List</span>.append res [k]);;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> findBreakPoint n = findBreakPointAux <span class="literal">[]</span> n;;</span><br></pre></td></tr></table></figure><pre><code>val findBreakPointAux : int list -&gt; int -&gt; int list = &lt;fun&gt;val findBreakPoint : int -&gt; int list = &lt;fun&gt;</code></pre><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findBreakPoint <span class="number">13</span>;;</span><br></pre></td></tr></table></figure><pre><code>findBreakPoint &lt;-- 13findBreakPointAux &lt;-- []findBreakPointAux --&gt; &lt;fun&gt;findBreakPointAux* &lt;-- 13Hashtbl.find &lt;-- &lt;abstr&gt;Hashtbl.find --&gt; &lt;fun&gt;Hashtbl.find* &lt;-- &lt;poly&gt;Hashtbl.find* --&gt; &lt;poly&gt;findBreakPointAux &lt;-- [13]findBreakPointAux --&gt; &lt;fun&gt;findBreakPointAux* &lt;-- 7Hashtbl.find &lt;-- &lt;abstr&gt;Hashtbl.find --&gt; &lt;fun&gt;Hashtbl.find* &lt;-- &lt;poly&gt;Hashtbl.find* --&gt; &lt;poly&gt;findBreakPointAux &lt;-- [13; 7]findBreakPointAux --&gt; &lt;fun&gt;findBreakPointAux* &lt;-- 3findBreakPointAux* --&gt; [13; 7; 3]findBreakPointAux* --&gt; [13; 7; 3]findBreakPointAux* --&gt; [13; 7; 3]findBreakPoint --&gt; [13; 7; 3]- : int list = [13; 7; 3]</code></pre><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;以下內容係參考網路上找到的LaTeX斷行演算法，加上一些修改而成。&lt;/p&gt;
&lt;p&gt;使用程式筆記本的.ipynb檔撰寫，語言是OCaml，授權為MIT License。載點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2023/07/23/latex-tng-tsua-ian-sng-huat/linebreak.ipynb&quot; title=&quot;[ipynb 檔]&quot;&gt;[ipynb 檔]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2023/07/23/latex-tng-tsua-ian-sng-huat/linebreak.pdf&quot; title=&quot;[PDF 檔]&quot;&gt;[PDF 檔]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是程式筆記本檔內文：&lt;/p&gt;
&lt;figure class=&quot;highlight ocaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(*有關於LaTeX使用於斷行的演算法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;首先我們要制定一個字元（包含斷行後新生的連字號，以及空白）在斷行前、斷行後的寬度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="資訊" scheme="http://yoxem.github.io/tags/%E8%B3%87%E8%A8%8A/"/>
    
  </entry>
  
  <entry>
    <title>一個外行對依值型別的理解</title>
    <link href="http://yoxem.github.io/2023/07/16/ua-tat-hing-piat-e-li-kai/"/>
    <id>http://yoxem.github.io/2023/07/16/ua-tat-hing-piat-e-li-kai/</id>
    <published>2023-07-16T15:03:52.000Z</published>
    <updated>2023-07-16T17:24:20.176Z</updated>
    
    <content type="html"><![CDATA[<p>依值型別 (dependent type) 是型別理論 (type theory) 的重要概念，也是FP的進階概念。因為概念很抽象，而且還要會點型別概念，方好入手。雖此係函數式程式語言的重要概念，但是許多程式人，會仰之彌高，進而生畏，降低學習意願，遑論相關係的定理證明了。</p><p>身為一個外行，之前筆者亦如是。對型別理論感到興趣之際，面對依值型別還是一頭霧水，不知何以理解。然最近稍理解些，所以做了這份筆記。</p><p>但是因為內文牽涉許多數學符號，為利閱讀，以<a href="http://typst.app/">Typst</a>排版軟體製成PDF版：<a href="/2023/07/16/ua-tat-hing-piat-e-li-kai/deptype.pdf" title="[下載連結]">[下載連結]</a></p><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;依值型別 (dependent type) 是型別理論 (type theory) 的重要概念，也是FP的進階概念。因為概念很抽象，而且還要會點型別概念，方好入手。雖此係函數式程式語言的重要概念，但是許多程式人，會仰之彌高，進而生畏，降低學習意願，遑論相關係的定理證明了。&lt;</summary>
      
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="資訊" scheme="http://yoxem.github.io/tags/%E8%B3%87%E8%A8%8A/"/>
    
    <category term="型別理論" scheme="http://yoxem.github.io/tags/%E5%9E%8B%E5%88%A5%E7%90%86%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>個人wiki最近更新（2023年4-6月）</title>
    <link href="http://yoxem.github.io/2023/07/11/ko&#39;jin-wiki-2023-Q2/"/>
    <id>http://yoxem.github.io/2023/07/11/ko&#39;jin-wiki-2023-Q2/</id>
    <published>2023-07-10T16:00:00.000Z</published>
    <updated>2023-07-01T10:48:22.549Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://kianting.info/wiki/w/Program=Proof%E7%AD%86%E8%A8%98">Program&#x3D;Proof筆記</a>‎‎：讀書心得</li><li><a href="https://kianting.info/wiki/w/%E9%80%A3%E8%AA%A6">連誦</a>：英文維基百科關於聯誦的筆記</li><li><a href="https://kianting.info/wiki/w/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E6%84%9B%E7%88%BE%E8%98%AD%E8%AA%9E/%E6%96%87%E6%B3%95/%E5%90%8D%E8%A9%9E/%E7%AC%AC%E4%B8%80%E8%AE%8A%E6%A0%BC">我所知道的愛爾蘭語&#x2F;文法&#x2F;名詞&#x2F;第一變格</a>：愛爾蘭語文法筆記</li></ul><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kianting.info/wiki/w/Program=Proof%E7%AD%86%E8%A8%98&quot;&gt;Program&amp;#x3D;Proof筆記&lt;/a&gt;‎‎：讀書心得&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ki</summary>
      
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="Wiki" scheme="http://yoxem.github.io/tags/Wiki/"/>
    
  </entry>
  
  <entry>
    <title>門口埕記事2：二代機初步完成啟用</title>
    <link href="http://yoxem.github.io/2023/04/24/mng5khau2tiann5-sua2tsam7/"/>
    <id>http://yoxem.github.io/2023/04/24/mng5khau2tiann5-sua2tsam7/</id>
    <published>2023-04-23T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.152Z</updated>
    
    <content type="html"><![CDATA[<p>鑑於 Pleroma 在樹莓派 3 執行一直不順，上禮拜（吧）釜底抽薪買一臺迷你電腦。剛好政府普發六千，補貼不少。<span id="more"></span></p><p>前天開始移機。執行過程，也是把一號機的相關資料夾備份，資料庫 dump 出指令文字檔。新二號機灌 Debian 11（當然這樣就不能用最新版 Pleroma，但是穩定比較重要）。</p><p>然後在二號機灌好 Pleroma 後，把相關檔案參考 Pleroma 官方說明文件移進去，資料庫指令部分也灌進去。昨天完成。</p><p>一切大致順利。但是，我發現在之前的一代機調整時，站規不見了，怎麼找都找不到，對不起。</p><p>目前還在<a href="https://kianting.info/wiki/w/%E9%96%80%E5%8F%A3%E5%9F%95%E4%BD%BF%E7%94%A8%E8%A6%8F%E7%B4%84">草擬站規</a>，預計將站規複本放在個人wiki上。避免重蹈覆轍。</p><div style="font-size:70%"><img src="/2023/04/24/mng5khau2tiann5-sua2tsam7/1.jpg" class="" title="一代機（樹莓派3）">一代機（樹莓派3）</div><div style="font-size:70%"><img src="/2023/04/24/mng5khau2tiann5-sua2tsam7/2.jpg" class="" title="二代機（迷你主機）">二代機（迷你主機）</div><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;鑑於 Pleroma 在樹莓派 3 執行一直不順，上禮拜（吧）釜底抽薪買一臺迷你電腦。剛好政府普發六千，補貼不少。</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="Pleroma" scheme="http://yoxem.github.io/tags/Pleroma/"/>
    
    <category term="門口埕記事" scheme="http://yoxem.github.io/tags/%E9%96%80%E5%8F%A3%E5%9F%95%E8%A8%98%E4%BA%8B/"/>
    
    <category term="Fediverse" scheme="http://yoxem.github.io/tags/Fediverse/"/>
    
  </entry>
  
  <entry>
    <title>個人wiki最近更新（2023年1-3月）</title>
    <link href="http://yoxem.github.io/2023/04/15/ko&#39;jin-wiki-tsue&#39;kin-king&#39;sin-2023-Q1/"/>
    <id>http://yoxem.github.io/2023/04/15/ko&#39;jin-wiki-tsue&#39;kin-king&#39;sin-2023-Q1/</id>
    <published>2023-04-14T16:00:00.000Z</published>
    <updated>2023-07-01T09:47:31.648Z</updated>
    
    <content type="html"><![CDATA[<p><strong>（最新更新：20230701）</strong></p><p>因為我目前也將所思和所整理的放在網絡上，列出近期新增頁面以供參考：</p><ul><li><a href="https://kianting.info/wiki/w/%E5%A6%82%E4%BD%95%E9%9A%B1%E5%B1%85%E7%9A%84%E6%83%B3%E6%B3%95">如何隱居的想法</a><ul><li>隱居可能要準備東西以及相關事項的個人想法。僅供參考，未經實證。</li></ul></li><li><a href="https://kianting.info/wiki/w/%E3%80%8C%E8%87%BA%E7%81%A3%E5%AE%98%E8%A9%B1%E6%AD%B7%E5%8F%B2%E8%AA%9E%E6%BA%90%E8%A9%9E%E5%85%B8%E3%80%8D%E8%8A%BB%E8%AD%B0">「臺灣官話歷史語源詞典」芻議</a><ul><li>面對中國用語傾銷問題的一種因應建議方案，至少大家用之前可以先評估一下。</li></ul></li><li><a href="https://kianting.info/wiki/w/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E6%84%9B%E7%88%BE%E8%98%AD%E8%AA%9E-%E7%9B%B8%E9%97%9C%E8%AB%96%E6%96%87%E3%80%81%E6%9B%B8%E7%B1%8D">我所知道的愛爾蘭語-相關論文、書籍</a><ul><li>今年春假前後開始蒐集的愛爾蘭文研究相關書籍。</li></ul></li><li><a href="https://kianting.info/wiki/w/%E6%9B%B8%E5%BA%97%E7%9A%84%E6%9B%BF%E9%81%B8%E6%96%B9%E6%A1%88">書店的替選方案</a><ul><li>不想用某些線上書店的 alternatives。</li></ul></li></ul><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;（最新更新：20230701）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因為我目前也將所思和所整理的放在網絡上，列出近期新增頁面以供參考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kianting.info/wiki/w/%E5%A6%82%E4</summary>
      
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="Wiki" scheme="http://yoxem.github.io/tags/Wiki/"/>
    
  </entry>
  
  <entry>
    <title>門口埕記事1：用樹莓派 3 運作 Pleroma 要三思</title>
    <link href="http://yoxem.github.io/2023/04/10/Mng5khau2tiann5-e5-ui5hoo7liok8/"/>
    <id>http://yoxem.github.io/2023/04/10/Mng5khau2tiann5-e5-ui5hoo7liok8/</id>
    <published>2023-04-09T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.140Z</updated>
    
    <content type="html"><![CDATA[<p>對不起<a href="https://sns.kianting.info/">Mn̂g-kháu-tiânn（門口埕）</a>最近暫停服務，於 2023-04-10 2:50am 前後重新啟用。</p><p>以下是關於從今年三月下旬許開始暫停服務的原因與 Pleroma 重灌的說明。</p><p>對於想要經營自己的 Pleroma 站臺，卻不想看底下的說明的，請記得：</p><p><strong>千萬不要在 Raspberry Pi 3 運作連接 Fediverse relay 的 Pleroma 站臺！！</strong></p><p><strong>Tshian-bān M̄-THANG tī Raspberry Pi 3 pháng ū tsiap Fediverse relay–ê Pleroma tsām!!</strong></p><p><strong>On a Raspberry Pi 3, NEVER operate a Pleroma instance connected with any relay!!</strong></p><p>很重要，用三語各說一次！</p><hr><p>故障原因是此站臺，從大概三月底之前就開始有負載過重的問題，時常自動重開，查詢或是送出 request 屢屢出現錯誤，後來用各種調試 PostgreSQL 還是解決不了（就算標榜輕量，還是不用 SQLite），我記得連廢資料清除的 vacuum 類 SQL 指令都用了。</p><p>後來受不了負載問題，決定重裝，但是 dump 出來的資料庫二進位檔案，兩次 dump 結果都不一樣（&#x3D; &#x3D;），因此受不了而使用純文字指令匯出方式備份，結果匯出了超過 1G 的指令（&#x3D; &#x3D;”），就算上週末把資料庫砍掉重置，把大量的指令匯入進去，結果花了好幾個小時，使我懷疑到底是不是故障了。現在已經匯入資料庫完畢了，但還需要觀察後續到底有沒有問題。</p><p>究其原因可能問題，係因為連接 relay（中繼轉訊伺服器）所致。因為 Pleroma 站臺除非有大量的使用者，否則需要 relay 才能看到大量其他站外有趣的內容。但是因為往往會從 relay 送來大量外站的資訊，就算這個站臺目前只有一個人（除了管理員賬戶以外）是主要使用者，fo 的人也沒有很多，仍然還是會造成資料庫和 Pleroma 軟體需要頻繁處理，難以重負。</p><p>就算是重整 PostgreSQL 資料庫內容，vacuum 就花很多時間。感覺這種情況調資料庫軟體參數也不一定有效。</p><p>總之，如果要自己經營站臺，要花好多時間，要經營相依軟體很多且需要繁雜設定時，更麻煩，若是機器效能不好，更費時。除非對資料庫或是網站營運知識，包含資料庫設定，有被虐狂似的渴求。</p><p>先這樣試看看吧。希望麻煩短期內不要來了。如果真的不行就需要換伺服器到迷你機殼（如果空間夠則另做打算），並大升級硬體性能。我已經浪費了許多寶貴的業餘時間在這上面，人生苦短，已經這把年紀，不該這樣把可支配時間當太平洋的海水一樣揮霍。</p><p>如果要重灌 Pleroma，以下要注意：<span id="more"></span></p><ul><li>可以用移除全部的底層相依軟體再用 Git 下載 Pleroma 原始碼重新編譯，並以類似 <code>apt remove --purge postgresql [...]</code> 這樣，強制移除相關檔案。<ul><li>類如：<code>sudo apt remove elixir erlang-dev erlang-nox imagemagick ffmpeg libimage-exiftool-perl</code></li></ul></li><li>要 dump 資料庫內容的時候，建議 dump 2 次，再用 md5sum 這種驗證軟體驗證是否有問題，因為匯出檔過大。</li><li>移除資料庫之前可以先把 PostgreSQL 的資料庫叢集移除掉。<ul><li>類如：<code>sudo -Hu postgres[即操作 Postgresql 的專用OS帳號] pg_dropcluster 13[即版本號] main[即本機叢集名]</code></li></ul></li><li>Pleroma 參考頁面，著手前必讀：<ul><li><a href="https://docs-develop.pleroma.social/backend/administration/backup/">備份、刪除、重置、移動的說明</a></li><li><a href="https://docs-develop.pleroma.social/backend/installation/debian_based_en/">Debian Linux 從原始碼編譯的安裝說明</a></li></ul></li></ul><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;對不起&lt;a href=&quot;https://sns.kianting.info/&quot;&gt;Mn̂g-kháu-tiânn（門口埕）&lt;/a&gt;最近暫停服務，於 2023-04-10 2:50am 前後重新啟用。&lt;/p&gt;
&lt;p&gt;以下是關於從今年三月下旬許開始暫停服務的原因與 Pleroma 重灌的說明。&lt;/p&gt;
&lt;p&gt;對於想要經營自己的 Pleroma 站臺，卻不想看底下的說明的，請記得：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;千萬不要在 Raspberry Pi 3 運作連接 Fediverse relay 的 Pleroma 站臺！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tshian-bān M̄-THANG tī Raspberry Pi 3 pháng ū tsiap Fediverse relay–ê Pleroma tsām!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On a Raspberry Pi 3, NEVER operate a Pleroma instance connected with any relay!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很重要，用三語各說一次！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;故障原因是此站臺，從大概三月底之前就開始有負載過重的問題，時常自動重開，查詢或是送出 request 屢屢出現錯誤，後來用各種調試 PostgreSQL 還是解決不了（就算標榜輕量，還是不用 SQLite），我記得連廢資料清除的 vacuum 類 SQL 指令都用了。&lt;/p&gt;
&lt;p&gt;後來受不了負載問題，決定重裝，但是 dump 出來的資料庫二進位檔案，兩次 dump 結果都不一樣（&amp;#x3D; &amp;#x3D;），因此受不了而使用純文字指令匯出方式備份，結果匯出了超過 1G 的指令（&amp;#x3D; &amp;#x3D;”），就算上週末把資料庫砍掉重置，把大量的指令匯入進去，結果花了好幾個小時，使我懷疑到底是不是故障了。現在已經匯入資料庫完畢了，但還需要觀察後續到底有沒有問題。&lt;/p&gt;
&lt;p&gt;究其原因可能問題，係因為連接 relay（中繼轉訊伺服器）所致。因為 Pleroma 站臺除非有大量的使用者，否則需要 relay 才能看到大量其他站外有趣的內容。但是因為往往會從 relay 送來大量外站的資訊，就算這個站臺目前只有一個人（除了管理員賬戶以外）是主要使用者，fo 的人也沒有很多，仍然還是會造成資料庫和 Pleroma 軟體需要頻繁處理，難以重負。&lt;/p&gt;
&lt;p&gt;就算是重整 PostgreSQL 資料庫內容，vacuum 就花很多時間。感覺這種情況調資料庫軟體參數也不一定有效。&lt;/p&gt;
&lt;p&gt;總之，如果要自己經營站臺，要花好多時間，要經營相依軟體很多且需要繁雜設定時，更麻煩，若是機器效能不好，更費時。除非對資料庫或是網站營運知識，包含資料庫設定，有被虐狂似的渴求。&lt;/p&gt;
&lt;p&gt;先這樣試看看吧。希望麻煩短期內不要來了。如果真的不行就需要換伺服器到迷你機殼（如果空間夠則另做打算），並大升級硬體性能。我已經浪費了許多寶貴的業餘時間在這上面，人生苦短，已經這把年紀，不該這樣把可支配時間當太平洋的海水一樣揮霍。&lt;/p&gt;
&lt;p&gt;如果要重灌 Pleroma，以下要注意：</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="資訊" scheme="http://yoxem.github.io/tags/%E8%B3%87%E8%A8%8A/"/>
    
    <category term="Pleroma" scheme="http://yoxem.github.io/tags/Pleroma/"/>
    
    <category term="PostgreSQL" scheme="http://yoxem.github.io/tags/PostgreSQL/"/>
    
    <category term="門口埕記事" scheme="http://yoxem.github.io/tags/%E9%96%80%E5%8F%A3%E5%9F%95%E8%A8%98%E4%BA%8B/"/>
    
    <category term="Fediverse" scheme="http://yoxem.github.io/tags/Fediverse/"/>
    
    <category term="ActivityPub" scheme="http://yoxem.github.io/tags/ActivityPub/"/>
    
  </entry>
  
  <entry>
    <title>2022 回顧</title>
    <link href="http://yoxem.github.io/2022/12/31/2022-huekoo/"/>
    <id>http://yoxem.github.io/2022/12/31/2022-huekoo/</id>
    <published>2022-12-30T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.136Z</updated>
    
    <content type="html"><![CDATA[<p>個人的情況：</p><ul><li>學了一些管理的方法，完成一些活動</li><li>買了一堆不需用的東西：法語教材（未讀）、電腦科學教材、鋼筆</li><li>體重大幅上升，體力更不好，感覺比較嗜吃。</li><li>負面情緒問題較有改善</li><li>開始種菜</li><li>投稿文學月刊、創作歌曲</li><li>遷站(web hosting)</li><li>SNS Pleroma 架設</li><li>很多書沒讀</li><li>放棄愛爾蘭語，法語尚未正式入坑</li><li>買了筆記</li><li>股票下跌</li></ul><span id="more"></span><p>現在的時局感覺也不是很好，頂多人均 GDP 超車日韓這種新聞可以開心一下。明年疫情想必繼續陰魂不散，全球經濟也很難短期內復甦，烏俄戰爭還是僵持，環境等問題也會影響着世界。</p><p>這個年宏觀來看，的確有許多不滿意的事，明年也看不到大幅度的改善，但是還是慶幸上帝讓自己還是能夠生存下來了。在不可測的未來，只能希望大家平安與健康。</p><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;個人的情況：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;學了一些管理的方法，完成一些活動&lt;/li&gt;
&lt;li&gt;買了一堆不需用的東西：法語教材（未讀）、電腦科學教材、鋼筆&lt;/li&gt;
&lt;li&gt;體重大幅上升，體力更不好，感覺比較嗜吃。&lt;/li&gt;
&lt;li&gt;負面情緒問題較有改善&lt;/li&gt;
&lt;li&gt;開始種菜&lt;/li&gt;
&lt;li&gt;投稿文學月刊、創作歌曲&lt;/li&gt;
&lt;li&gt;遷站(web hosting)&lt;/li&gt;
&lt;li&gt;SNS Pleroma 架設&lt;/li&gt;
&lt;li&gt;很多書沒讀&lt;/li&gt;
&lt;li&gt;放棄愛爾蘭語，法語尚未正式入坑&lt;/li&gt;
&lt;li&gt;買了筆記&lt;/li&gt;
&lt;li&gt;股票下跌&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="生活" scheme="http://yoxem.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>ActivityPub 協定的基本踩坑心得（下）</title>
    <link href="http://yoxem.github.io/2022/11/22/activitypub-e-tshiok-thoo&#39;muai-e-sim&#39;tit/"/>
    <id>http://yoxem.github.io/2022/11/22/activitypub-e-tshiok-thoo&#39;muai-e-sim&#39;tit/</id>
    <published>2022-11-21T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.144Z</updated>
    
    <content type="html"><![CDATA[<p><strong>（最近更新：2022-11-23，勘誤）</strong></p><p><a href="http://yoxem.github.io/2022/11/20/activitypub-e-kipun-kauhak-1/">前文</a></p><p>作爲前文的續篇，程式碼仍然改自 <a href="https://github.com/timmot">Timmot</a>的作品，使用 MIT授權。<span id="more"></span></p><h3 id="如何發送-follow-request"><a href="#如何發送-follow-request" class="headerlink" title="如何發送 follow request"></a>如何發送 follow request</h3><h4 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h4><p>我們這裏示範如何發送 following request。這裏需要進行加密技術的簽署驗證 (HTTP Signature)，還有製作 digest。所以動作會比較繁瑣。</p><h4 id="先備安裝"><a href="#先備安裝" class="headerlink" title="先備安裝"></a>先備安裝</h4><p>我們進去 <code>~/my_folder</code>目錄，安裝加密和發送 HTTP request 的套件：</p><p><code>pip install cryptography requests</code></p><h4 id="嘗試做法"><a href="#嘗試做法" class="headerlink" title="嘗試做法"></a>嘗試做法</h4><p>建立<code>~/my_folder/fo_req.py</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"># 因為要加密，所以要 import 一堆東西。</span><br><span class="line">from cryptography.hazmat.backends import default_backend as crypto_default_backend</span><br><span class="line">from cryptography.hazmat.primitives import serialization as crypto_serialization</span><br><span class="line">from cryptography.hazmat.primitives import hashes</span><br><span class="line">from cryptography.hazmat.primitives.asymmetric import padding</span><br><span class="line"></span><br><span class="line">from urllib.parse import urlparse # 分析 url</span><br><span class="line">import base64 #用 base64 轉碼用</span><br><span class="line">import datetime #時間日期</span><br><span class="line">import requests #送 http request</span><br><span class="line">import hashlib #產生雜湊用</span><br><span class="line">import json # 處理 json</span><br><span class="line">import os.path # 處理路徑</span><br><span class="line">default_sender = &quot;alice&quot; # 寄件者名稱</span><br><span class="line">sender_domain = &quot;activitypub_test.ddns.net&quot; #寄件者域名</span><br><span class="line"></span><br><span class="line">receiver_name = &quot;bob&quot; #收件人名稱</span><br><span class="line">recipient_domain = &quot;example.social&quot; #收件者域名</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;產生一些連結&#x27;&#x27;&#x27;</span><br><span class="line">recipient_url = f&quot;https://&#123;recipient_domain&#125;/users/&#123;receiver_name&#125;&quot; #對方的代表網址</span><br><span class="line">recipient_inbox = f&quot;https://&#123;recipient_domain&#125;/users/&#123;receiver_name&#125;/inbox&quot; #對方的寄件匣</span><br><span class="line"></span><br><span class="line">sender_url = f&quot;https://&#123;sender_domain&#125;/users/&#123;default_sender&#125;&quot; # 發信者用戶網址</span><br><span class="line">sender_key = f&quot;https://&#123;sender_domain&#125;/users/&#123;default_sender&#125;#main-key&quot; # 發信者的 key</span><br><span class="line"></span><br><span class="line"># 這個舉動（發送 follow request）的 identified（獨一）的識別網址，這裏使用 test，實際可以用亂數</span><br><span class="line">activity_id = f&quot;https://&#123;sender_domain&#125;/users/&#123;default_sender&#125;/follows/test&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;簽署 http request&#x27;&#x27;&#x27;</span><br><span class="line">home_folder = os.path.expanduser(&quot;~&quot;) # 家目錄</span><br><span class="line">private_key_path = os.path.join(home_folder, &quot;my_folder/my_keys/private.pem&quot;)</span><br><span class="line"></span><br><span class="line">private_key_path = f&quot;/etc/letsencrypt/live/&#123;sender_domain&#125;/privkey.pem&quot; # 私鑰路徑</span><br><span class="line">private_key_text = open(private_key_path, &#x27;rb&#x27;).read() # load from file</span><br><span class="line"></span><br><span class="line"># 將 private_key_text 的文字存成 private_key</span><br><span class="line">private_key = crypto_serialization.load_pem_private_key(</span><br><span class="line">    private_key_text,</span><br><span class="line">    password=None,</span><br><span class="line">    backend=crypto_default_backend()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 產生格式如 Mon, 21 Nov 2022 14:47:28 GMT 的現在時間（UTC 時區）</span><br><span class="line">current_date = datetime.datetime.utcnow().strftime(&#x27;%a, %d %b %Y %H:%M:%S GMT&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">recipient_parsed = urlparse(recipient_inbox) #分析收件方的地址</span><br><span class="line">recipient_path = recipient_parsed.path # &#x27;/users/bob/inbox&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># following 的訊息內容 (dict)</span><br><span class="line">follow_request_message = &#123;</span><br><span class="line">    &quot;@context&quot;: &quot;https://www.w3.org/ns/activitystreams&quot;,</span><br><span class="line">    &quot;id&quot;: activity_id,</span><br><span class="line">    &quot;type&quot;: &quot;Follow&quot;,</span><br><span class="line">    &quot;actor&quot;: sender_url, # 收件者地址</span><br><span class="line">    &quot;object&quot;: recipient_url # 寄件者地址</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;製作digest摘要資訊&#x27;&#x27;&#x27;</span><br><span class="line"># 將follow_request_message 轉 json</span><br><span class="line">follow_request_json = json.dumps(follow_request_message)</span><br><span class="line"></span><br><span class="line">#產生上述 json 的 hash 值，並用 base64 編碼，存成 digest（摘要）</span><br><span class="line">digest = base64.b64encode(hashlib.sha256(follow_request_json.__str__().encode(&#x27;utf-8&#x27;)).digest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 建立簽署用文字</span><br><span class="line"># 格式為：</span><br><span class="line">#(request-target): post [recipient_path]</span><br><span class="line">#digest: [digest]</span><br><span class="line">#host: [recipient_domain]</span><br><span class="line">#date: [current_date]</span><br><span class="line"># 方框[]內的值用 utf-8 編碼</span><br><span class="line">signature_text = b&#x27;(request-target): post %s\ndigest: SHA-256=%s\nhost: %s\ndate: %s&#x27; % \</span><br><span class="line">                    (recipient_path.encode(&#x27;utf-8&#x27;),</span><br><span class="line">                     digest,</span><br><span class="line">                     recipient_domain.encode(&#x27;utf-8&#x27;),</span><br><span class="line">                     current_date.encode(&#x27;utf-8&#x27;))</span><br><span class="line"></span><br><span class="line"># 用私鑰產生 signature_text 簽署得出的值</span><br><span class="line">raw_signature = private_key.sign(</span><br><span class="line">    signature_text,</span><br><span class="line">    padding.PKCS1v15(),</span><br><span class="line">    hashes.SHA256()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 將簽署值轉成 base64</span><br><span class="line">raw_signature_in_base64 = base64.b64encode(raw_signature).decode(&#x27;utf-8&#x27;)</span><br><span class="line">print(signature_text)</span><br><span class="line"></span><br><span class="line"># 提供寄件者公鑰 sender_key 和轉成 base64 的簽署值，存到 signature_header</span><br><span class="line"># headers=&quot;(request-target) digest host date 和上面提到的簽署用文字格式相似</span><br><span class="line">signature_header = f&#x27;keyId=&quot;&#123;sender_key&#125;&quot;,algorithm=&quot;rsa-sha256&quot;,headers=&quot;(request-target) digest host date&quot;,signature=&quot;&#123;raw_signature_in_base64&#125;&quot;&#x27;</span><br><span class="line"></span><br><span class="line"># 設定 request 的 http 表頭</span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Date&#x27;: current_date, # 日期</span><br><span class="line">    &#x27;Content-Type&#x27;: &#x27;application/activity+json&#x27;,</span><br><span class="line">    &#x27;Host&#x27;: recipient_domain, # 收件者域名</span><br><span class="line">    &#x27;Digest&#x27;: &quot;SHA-256=&quot;+digest.decode(&#x27;utf-8&#x27;), # digest 用 UTF-8 解碼</span><br><span class="line">    &#x27;Signature&#x27;: signature_header</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 以 POST 方法送出 request，回應存在 r</span><br><span class="line">r = requests.post(recipient_inbox,</span><br><span class="line">                  headers=headers, # 表頭</span><br><span class="line">                  json=follow_request_message # 內容</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(r, r.content) # 顯示回應內容</span><br></pre></td></tr></table></figure><p>這樣傳輸，會給出 &lt;200&gt; code，代表成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Response [202]&gt; b&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>另可參<a href="https://git.sr.ht/~tsileo/microblog.pub/tree/d692ec060f90d6686c257dc98992e0adc0b57586/item/app/httpsig.py#L288">這個 Microblog 的程式片段</a>，但是使用的加密函式庫不一樣，就留給讀者參考吧。</p><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;（最近更新：2022-11-23，勘誤）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://yoxem.github.io/2022/11/20/activitypub-e-kipun-kauhak-1/&quot;&gt;前文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作爲前文的續篇，程式碼仍然改自 &lt;a href=&quot;https://github.com/timmot&quot;&gt;Timmot&lt;/a&gt;的作品，使用 MIT授權。</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="資訊" scheme="http://yoxem.github.io/tags/%E8%B3%87%E8%A8%8A/"/>
    
    <category term="ActivityPub" scheme="http://yoxem.github.io/tags/ActivityPub/"/>
    
    <category term="Python" scheme="http://yoxem.github.io/tags/Python/"/>
    
    <category term="Django" scheme="http://yoxem.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>ActivityPub 協定的基本教學（上）</title>
    <link href="http://yoxem.github.io/2022/11/20/activitypub-e-kipun-kauhak-1/"/>
    <id>http://yoxem.github.io/2022/11/20/activitypub-e-kipun-kauhak-1/</id>
    <published>2022-11-20T15:21:55.000Z</published>
    <updated>2023-06-13T02:14:58.144Z</updated>
    
    <content type="html"><![CDATA[<p><strong>（最近更新：2022-11-23，勘誤）</strong></p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>隨着馬斯克入主推特後對內激進整飭的作爲，許多人想到避難目標 Mastodon。但是也不一定要入駐 Mastodon，因為 Mastodon 是利用去中心化 ActivityPub 協定跨伺服器傳遞訊息的，所以只要支援 ActivityPub 的 SNS 平臺，比如 Pleroma、MissKey 都可以使用。</p><p>另外鑑於有些人反映 Mastodon 的效率太慢，其實也可以自己製作支援 ActivityPub 的微網誌服務軟體。我之前<a href="https://github.com/Yoxem/khaikang">本來想要做一組SNS</a>，但是發現這個 side-project 會嚴重侵蝕自己的作息控制和身心健康，所以擱置了。</p><p>但是鑑於這個去中心化協定獲得的關注度很高，而網路上幾乎沒有華語的教學，從而沒有辦法百花齊放，推進這個技術的生態圈，洵為可惜，加上自己曾經參與一篇 Timmot 的教學的回饋，所以就用該教學來編譯成華語，希望能夠推動大家對這個協議的興趣。</p><p>如果這個教學有錯誤處請告訴我。另筆者不負責參考本教學執行的後果，還請注意。</p><span id="more"></span><h2 id="教學簡介"><a href="#教學簡介" class="headerlink" title="教學簡介"></a>教學簡介</h2><p>教學的 Python 程式碼改自 <a href="https://github.com/timmot">timmot</a> 的 ActivityPub 教學，將 原教學使用的 Flask 後端框架翻譯成 Django 這個 Python 網頁後端框架的版本，使用 <a href="https://github.com/timmot/activity-pub-tutorial/blob/master/LICENSE">MIT 授權</a>。</p><p>其中會先教到如何使用 Nginx 伺服器驅動一個新設置的 Django 專案，再用這個專案改成能夠傳輸 ActivityPub json 訊息之軟體。</p><h3 id="先備條件"><a href="#先備條件" class="headerlink" title="先備條件"></a>先備條件</h3><p>以下教學適用環境如下：</p><p>會 Python 和 Django 的基礎知識。</p><ul><li>Ubuntu 20.04（我是在 Docker 裏面測試，但是實機應該也可以照樣用）</li><li>Python 3.10.6</li><li>Django 4.1.3</li><li>一組浮動 IP</li><li>No-IP Linux DUC Stable version 2.1.9</li><li>certbot 1.32.0</li></ul><h2 id="基礎軟體安裝"><a href="#基礎軟體安裝" class="headerlink" title="基礎軟體安裝"></a>基礎軟體安裝</h2><h3 id="Nginx-HTTP-伺服器"><a href="#Nginx-HTTP-伺服器" class="headerlink" title="Nginx HTTP 伺服器"></a>Nginx HTTP 伺服器</h3><p>安裝 nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install nginx</span><br></pre></td></tr></table></figure><p>確認一下 systemtctl 有沒有開啓 nginx，沒有則開啓：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start nginx</span><br></pre></td></tr></table></figure><p>這時候打開瀏覽器，進入 127.0.0.1 這個代表自己電腦的 IP，看到下列文字，代表成功了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Welcome to nginx!</span><br><span class="line"> If you see this page, the nginx web server is successfully installed and working. Further configuration is required.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Python-程式語言"><a href="#Python-程式語言" class="headerlink" title="Python 程式語言"></a>Python 程式語言</h3><p>因為 Django 是 Python 語言的後端框架，所以需要安裝 Python，和安裝 Python 套件的工具 pip：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install python3-pip python-3</span><br></pre></td></tr></table></figure><h3 id="Django-安裝、建置專案"><a href="#Django-安裝、建置專案" class="headerlink" title="Django 安裝、建置專案"></a>Django 安裝、建置專案</h3><h4 id="安裝-virtualenv、建立環境目錄"><a href="#安裝-virtualenv、建立環境目錄" class="headerlink" title="安裝 virtualenv、建立環境目錄"></a>安裝 virtualenv、建立環境目錄</h4><p>爲了隔離開發環境的依賴模組，我們把 Python 套件用 virtualenv 安裝在自定的目錄裏面，避免動到系統全局的套件安裝，所以先安裝 virtualenv：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install virtualenv #安裝 virtualenv </span><br></pre></td></tr></table></figure><p>在家目錄或其他適當的地方建立新目錄 <code>my_folder</code>，並在裏面建立自己的環境目錄<code>my_env</code>，套用環境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user@host:~$ mkdir my_folder</span><br><span class="line">user@host:~$ cd my_folder</span><br><span class="line">user@host:~/my_folder$ virtualenv my_env #建立自己的環境目錄</span><br><span class="line">user@host:~/my_folder$ source my_env/bin/activate #進入自己的環境</span><br><span class="line">(my_env) user@host:~/my_folder$ </span><br></pre></td></tr></table></figure><h4 id="在環境目錄內安裝-Django"><a href="#在環境目錄內安裝-Django" class="headerlink" title="在環境目錄內安裝 Django"></a>在環境目錄內安裝 Django</h4><p>最後灌 Django 框架到環境目錄內：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my_env) user@host:~/my_folder$ pip3 install django</span><br></pre></td></tr></table></figure><h4 id="建立自己的測試專案"><a href="#建立自己的測試專案" class="headerlink" title="建立自己的測試專案"></a>建立自己的測試專案</h4><p>用 django-admin 建立測試專案資料夾 <code>activitypub_test</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my_env) user@host:~/my_folder$ django-admin startproject activitypub_test</span><br></pre></td></tr></table></figure><h3 id="安裝時區資料-tzdata"><a href="#安裝時區資料-tzdata" class="headerlink" title="安裝時區資料 tzdata"></a>安裝時區資料 tzdata</h3><p>爲了正確處理時區資訊，需要安裝 tzdata：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install tzdata</span><br></pre></td></tr></table></figure><h3 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h3><p>和 uWSGI 一樣，提供伺服器軟體和 Python Django 網頁後端框架溝通的橋樑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my_env) user@host:~/my_folder$ pip3 install gunicorn</span><br></pre></td></tr></table></figure><p>進去自己的專案目錄，然後測試，出現類似下列的字樣，可以 <code>Ctrl-z</code> 離開：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(my_env) user@host:~/my_folder$ cd activitypub_test</span><br><span class="line">(my_env) user@host:~/my_folder/activitypub_test$ gunicorn --bind 0.0.0.0:8000 activitypub_test.wsgi</span><br><span class="line">[2022-11-19 09:14:29 +0000] [54] [INFO] Starting gunicorn 20.1.0</span><br><span class="line">[2022-11-19 09:14:29 +0000] [54] [INFO] Listening at: http://0.0.0.0:8000 (54)</span><br><span class="line">[2022-11-19 09:14:29 +0000] [54] [INFO] Using worker: sync</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>爲了讓系統起動時能夠自動開啓 gunicorn，需要建立下列兩個 Systemd 的設定檔案：</p><ul><li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;gunicorn.socket</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=gunicorn socket</span><br><span class="line"></span><br><span class="line">[Socket]</span><br><span class="line">ListenStream=/run/gunicorn.sock</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=sockets.target</span><br></pre></td></tr></table></figure><ul><li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;gunicorn.service</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=gunicorn daemon</span><br><span class="line">Requires=gunicorn.socket</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=user</span><br><span class="line">Group=www-data</span><br><span class="line">WorkingDirectory=/home/my_folder/activitypub_test</span><br><span class="line">ExecStart=/home/my_folder/my_env/bin/gunicorn \</span><br><span class="line">          --access-logfile - \</span><br><span class="line">          --workers 3 \</span><br><span class="line">          --bind unix:/run/gunicorn.sock \</span><br><span class="line">          activitypub_test.wsgi:application</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>啓動 gunicorn：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start gunicorn</span><br></pre></td></tr></table></figure><h4 id="Nginx-設定"><a href="#Nginx-設定" class="headerlink" title="Nginx 設定"></a>Nginx 設定</h4><p>建立該設定檔 &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;activitypub_test.conf：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line"># https://docs.djangoproject.com/en/dev/howto/static-files/#serving-static-files-in-production</span><br><span class="line"># location /static &#123; # STATIC_URL</span><br><span class="line">#    root /var/www/html/;</span><br><span class="line">#                  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Scheme $scheme;</span><br><span class="line">            proxy_pass http://127.0.0.1:8000;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>建立設定檔連結給 nginx 使用，測試設定檔，然後重啓服務：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/nginx/sites-available/activitypub_test.conf /etc/nginx/sites-enabled</span><br><span class="line">nginx -t # 測試設定檔有沒有問題</span><br><span class="line">sudo systemctl restart nginx # 重啓 nginx 服務</span><br></pre></td></tr></table></figure><p>嘗試連到 127.0.0.1，應該會出現這個結果，代表正常運作：</p><img src="/2022/11/20/activitypub-e-kipun-kauhak-1/DjangoTestPage.png" class="" title="Django 測試成功畫面"><p>設定防火牆：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw delete allow 8000</span><br><span class="line">sudo ufw allow &#x27;Nginx Full&#x27;</span><br></pre></td></tr></table></figure><h3 id="浮動-IP-轉址（DDNS）設定"><a href="#浮動-IP-轉址（DDNS）設定" class="headerlink" title="浮動 IP 轉址（DDNS）設定"></a>浮動 IP 轉址（DDNS）設定</h3><p>因為我們使用浮動 IP，另外 ActivityPub 協定需要域名，所以需要動態轉址。以下採用 No-IP 的服務設定。</p><p>假設創立新賬戶，申請到 <code>activitypub-test.ddns.net</code> 這個網址後，到<a href="https://www.noip.com/download?page=linux">No-ip 的用戶端下載頁</a> 下載。</p><p>解壓縮之後，編譯解壓縮：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar xvf noip-duc-linux.tar.gz</span><br><span class="line">cd noip-2.1.9-1</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>在 <code>make install</code> 這個階段裏，依指示輸入之後。就設定動態轉址完畢。</p><p>啓用 noip2 客戶端程式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/noip2</span><br></pre></td></tr></table></figure><p>修改 Nginx 設定檔的第 3 行<code>server_name 127.0.0.1;</code>為<code>server_name activitypub-test.ddns.net;</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name activitypub-test.ddns.net;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然後將 Nginx 重啓：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>到專案目錄裏面，開啓<code>settings.py</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/my_folder/activitypub_test/activitypub_test/</span><br><span class="line">nano settings.py</span><br></pre></td></tr></table></figure><p>將<code>ALLOWED_HOSTS = []</code> 這行添加我們新申請的域名，變成：<code>ALLOWED_HOSTS = [&#39;activitypub-test.ddns.net&#39;]</code>；<br>存檔然後離開。</p><p>最後重啓 gunicorn：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart gunicorn</span><br></pre></td></tr></table></figure><p>連進去 <code>activitypub-test.ddns.net</code> 就應該可以看到 Django 測試頁面了。</p><h4 id="設定-HTTPS-憑證等（用-Certbot）"><a href="#設定-HTTPS-憑證等（用-Certbot）" class="headerlink" title="設定 HTTPS 憑證等（用 Certbot）"></a>設定 HTTPS 憑證等（用 Certbot）</h4><p>安裝方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install snapd # 安裝 Snap 套件管理程式</span><br><span class="line">sudo snap install --classic certbot # 安裝 certbot</span><br><span class="line">sudo ln -s /snap/bin/certbot /usr/bin/certbot # 建立執行檔連結到 /usr/bin/</span><br></pre></td></tr></table></figure><p>執行 certbot，取得 HTTPS 證書：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure><p>會得到證書和私鑰的連結：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Successfully received certificate.</span><br><span class="line">Certificate is saved at: /etc/letsencrypt/live/activitypub-test.ddns.net/fullchain.pem</span><br><span class="line">Key is saved at:         /etc/letsencrypt/live/activitypub-test.ddns.net/privkey.pem</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;activitypub_test.conf 這個 nginx 也會被修改，增加 HTTPS 的功能。</p><h4 id="產生公私鑰"><a href="#產生公私鑰" class="headerlink" title="產生公私鑰"></a>產生公私鑰</h4><p>因為 HTTP Signature 需要公私鑰，所以需要產生一組：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/my_folder/my_keys; cd ~/my_folder/my_keys # 建立新目錄並進入</span><br><span class="line">openssl genrsa -out private.pem 2048 # 產生私鑰</span><br><span class="line">openssl rsa -in private.pem -outform PEM -pubout -out public.pem # 產生公鑰</span><br></pre></td></tr></table></figure><h2 id="建構-ActivityPub-伺服器"><a href="#建構-ActivityPub-伺服器" class="headerlink" title="建構 ActivityPub 伺服器"></a>建構 ActivityPub 伺服器</h2><ul><li>閱讀之前可以參考<a href="https://www.w3.org/TR/activitypub/#Overview">ActivityPub協定的介紹</a>（英文）</li><li>這裏我們假設一個用戶，id 叫 alice，我們可以這樣寫伺服器：</li></ul><h3 id="先匯入必要的函式庫、函數等"><a href="#先匯入必要的函式庫、函數等" class="headerlink" title="先匯入必要的函式庫、函數等"></a>先匯入必要的函式庫、函數等</h3><p>先進入<code>~/my_folder/activitypub_test/</code>專案頁面。<br>開啓 <code>activitypub_test/views.py</code>，匯入必要的函式庫：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> from django.http import HttpResponse # 回傳一般的 HTTP 的回應 (response)</span><br><span class="line">from django.http import HttpResponseNotFound # 回傳 404 回應</span><br><span class="line">from django.views.decorators.csrf import csrf_exempt #不檢查 csrf token</span><br><span class="line">import json # 處理 json 用</span><br><span class="line">import os.path # 處理路徑用</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;設定基本用戶 alice 的變數和域名&#x27;&#x27;&#x27;</span><br><span class="line">default_user_name = &quot;alice&quot;  #　id 名稱</span><br><span class="line">default_shown_name = &quot;Alice&quot; # 顯示名稱</span><br><span class="line">domain = &quot;activitypub-test.ddns.net&quot; # 域名</span><br></pre></td></tr></table></figure><h3 id="製作可以回傳用戶基本資料的-json"><a href="#製作可以回傳用戶基本資料的-json" class="headerlink" title="製作可以回傳用戶基本資料的 json"></a>製作可以回傳用戶基本資料的 json</h3><p>開啓 <code>activitypub_test/urls.py</code>，新增一個網頁規則：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line">    path(&#x27;users/&lt;username&gt;&#x27;, views.user_info), # 回傳用戶資料用</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>開啓<code>activitypub_test/views.py</code>，建立<code>user_info</code>函數，決定回傳的內容。如果 username 是 alice，回傳其個人資訊：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 回傳使用者資料</span><br><span class="line">def user_info(request, username):</span><br><span class="line">    # 使用者公鑰的檔案路徑，這裏使用本站 https 的公鑰</span><br><span class="line">    home_folder = os.path.expanduser(&quot;~&quot;)</span><br><span class="line">    public_key_path = os.path.join(home_folder, &quot;my_folder/my_keys/public.pem&quot;) </span><br><span class="line"></span><br><span class="line">    public_key = open(public_key_path, &#x27;r&#x27;).read() #　輸入公鑰</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;若是輸入的 user_name 不是 default_user_name，回傳找不到。&#x27;&#x27;&#x27;</span><br><span class="line">    if username != default_user_name:</span><br><span class="line">        return HttpResponseNotFound(&quot;the user name doesn&#x27;t exist.&quot;)</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">      # 個人資料的 dict</span><br><span class="line">        user_info_dict = &#123;</span><br><span class="line">        &quot;@context&quot;: [</span><br><span class="line">            &quot;https://www.w3.org/ns/activitystreams&quot;, # 應該是協定的部分</span><br><span class="line">            &quot;https://w3id.org/security/v1&quot;,</span><br><span class="line">        ],</span><br><span class="line">        &quot;id&quot;: f&quot;https://&#123;domain&#125;/users/&#123;username&#125;&quot;, # 指向使用者的頁面</span><br><span class="line">        &quot;inbox&quot;: f&quot;https://&#123;domain&#125;/users/&#123;username&#125;/inbox&quot;, # 收信匣</span><br><span class="line">        &quot;outbox&quot;: f&quot;https://&#123;domain&#125;/users/&#123;username&#125;/outbox&quot;, # 寄信匣</span><br><span class="line">        &quot;type&quot;: &quot;Person&quot;,</span><br><span class="line">        &quot;name&quot;: default_shown_name, # 使用者顯示名稱</span><br><span class="line">        &quot;preferredUsername&quot;: username, #　使用者的 id 名稱</span><br><span class="line">    # 公鑰部分：</span><br><span class="line">        &quot;publicKey&quot;: &#123;</span><br><span class="line">            &quot;id&quot;: f&quot;https://&#123;domain&#125;/users/&#123;username&#125;#main-key&quot;,</span><br><span class="line">            &quot;id&quot;: f&quot;https://&#123;domain&#125;/users/&#123;username&#125;&quot;,</span><br><span class="line">            &quot;publicKeyPem&quot;: public_key</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        user_info_json = json.dumps(user_info_dict) # 轉成 json</span><br><span class="line"></span><br><span class="line">        # 將 json 轉成 response，然後設定 content-type，最後回傳</span><br><span class="line">        user_info_json_response = HttpResponse(user_info_json,</span><br><span class="line">                              content_type = &#x27;application/activity+json&#x27;)</span><br><span class="line">        return user_info_json_response</span><br></pre></td></tr></table></figure><h3 id="建立-Webfinger-資訊"><a href="#建立-Webfinger-資訊" class="headerlink" title="建立 Webfinger 資訊"></a>建立 Webfinger 資訊</h3><p>Webfinger 是辨識使用者或其他實體的方法，採用一組獨特的 URI。位址形式有點像是 email。</p><p><code>activitypub_test/urls.py</code> 的 <code>urlpatterns</code> 改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line">    path(&#x27;users/&lt;username&gt;&#x27;, views.user_info),</span><br><span class="line">    path(&#x27;.well-known/webfinger&#x27;, views.webfingr), # webfinger 用</span><br></pre></td></tr></table></figure><p>開啓<code>activitypub_test/views.py</code>，建立<code>webfinger</code>函數，決定回傳的 webfinger 資訊。如果 username 是 alice，回傳其個人資訊：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 傳遞 webfinger 資料</span><br><span class="line">def webfinger(request):</span><br><span class="line">    webfinger = request.GET.get(&#x27;resource&#x27;) # 得到用 GET 方法傳來的 resource（位址）</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;將 &#x27;alice&#x27; 轉成 webfinger 位址</span><br><span class="line">  形式如 acct:alice@activitypub_test.ddns.org&#x27;&#x27;&#x27;</span><br><span class="line">    account = &quot;acct:&quot; + default_user_name + &quot;@&quot; + domain</span><br><span class="line"></span><br><span class="line">    # 如果查詢的不是 alice 的位址，則回傳找不到</span><br><span class="line">    if webfinger != account:</span><br><span class="line">        return HttpResponseNotFound(&quot;can&#x27;t find the user in the site.&quot;)</span><br><span class="line"></span><br><span class="line">   # 如果查詢的是 alice，回傳個人資料的 json</span><br><span class="line">    webfinger_dict = &#123;</span><br><span class="line">        &quot;subject&quot;: account,</span><br><span class="line">        &quot;links&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;rel&quot;: &quot;self&quot;,</span><br><span class="line">                &quot;type&quot;: &quot;application/activity+json&quot;,</span><br><span class="line">                &quot;href&quot;: f&quot;https://&#123;domain&#125;/users/&#123;default_user_name&#125;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 回傳 json</span><br><span class="line">    return HttpResponse(json.dumps(webfinger_dict),</span><br><span class="line">                      content_type = &quot;application/jrd+json&quot;)</span><br></pre></td></tr></table></figure><h3 id="建立-inbox（收信匣）"><a href="#建立-inbox（收信匣）" class="headerlink" title="建立 inbox（收信匣）"></a>建立 inbox（收信匣）</h3><p>雖然也可以建立 outbox，但是這裏爲求方便，僅說明建立 inbox，以接受其他人傳來的 json 訊息。</p><p><code>ctivitypub_test/urls.py</code> 的 <code>urlpatterns</code> 改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line">    path(&#x27;users/&lt;username&gt;&#x27;, views.user_info),</span><br><span class="line">    path(&#x27;.well-known/webfinger&#x27;, views.webfinger),</span><br><span class="line">    path(&#x27;users/&lt;username&gt;/inbox&#x27;, views.inbox), # 收信匣</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>開啓<code>activitypub_test/views.py</code>，建立<code>ibox</code>函數，當做收信匣。另外我們把收到的信息存在 <code>inbox_log.txt</code> 裏面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@csrf_exempt # 不要進行 csrf token 檢查</span><br><span class="line">def inbox(request, username):</span><br><span class="line">    # 預設傳訊息的 inbox 使用 POST 方法</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        log = open(&#x27;inbox_log.txt&#x27;, &#x27;a&#x27;) # 打開 inbox_log.txt 這個 log</span><br><span class="line">        </span><br><span class="line">    # 如果不是 alice，回傳找不到</span><br><span class="line">        if username != default_user_name:</span><br><span class="line">            HttpResponseNotFound(&quot;can&#x27;t get the inbox&quot;)</span><br><span class="line"></span><br><span class="line">        header = request.headers # request 的 header</span><br><span class="line">        data = request.body # request 的內容</span><br><span class="line"></span><br><span class="line">        # 將 request 的內容寫在 log 裏面，然後關掉：</span><br><span class="line">        text = f&#x27;message:\n&#123;header&#125; \n&#123;data&#125;\n&#x27;</span><br><span class="line">        log.write(text)</span><br><span class="line">        log.close()</span><br><span class="line"></span><br><span class="line">        # 最後回傳 OK</span><br><span class="line">        return HttpResponse(&quot;OK&quot;)</span><br><span class="line">  #其他情況回傳找不到</span><br><span class="line">    else:</span><br><span class="line">        return HttpResponseNotFound(&quot;can&#x27;t get the inbox&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何寄送跟隨請求？"><a href="#如何寄送跟隨請求？" class="headerlink" title="如何寄送跟隨請求？"></a>如何寄送跟隨請求？</h3><p><a href="https://yoxem.github.io/2022/11/22/activitypub-e-tshiok-thoo'muai-e-sim'tit">可參後文</a></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.com/timmot/activity-pub-tutorial">timmot &#x2F;activity-pub-tutorial</a></li><li><a href="https://ubuntu.com/tutorials/install-and-configure-nginx#1-overview">Install and configure Nginx</a></li><li><a href="https://linuxize.com/post/start-stop-restart-nginx/">How to Start, Stop, or Restart Nginx</a></li><li><a href="https://docs.gunicorn.org/en/stable/install.html">Gunicorn Installation</a></li><li><a href="https://stackoverflow.com/questions/28873121/mysite-wsgi-file-is-missing-after-creating-django-project">mysite.wsgi file is missing after creating django project</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-22-04">How To Set Up Django with Postgres, Nginx, and Gunicorn on Ubuntu 22.04</a></li><li><a href="https://stackoverflow.com/questions/40582423/invalid-http-host-header">Invalid http_host header</a></li><li><a href="https://stackoverflow.com/questions/71058888/zoneinfonotfounderror-no-time-zone-found-with-key-utc">ZoneInfoNotFoundError: ‘No time zone found with key utc’</a></li><li><a href="https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal">Certbot Instructions - Nginx on Ubuntu 20</a></li></ul><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;（最近更新：2022-11-23，勘誤）&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;隨着馬斯克入主推特後對內激進整飭的作爲，許多人想到避難目標 Mastodon。但是也不一定要入駐 Mastodon，因為 Mastodon 是利用去中心化 ActivityPub 協定跨伺服器傳遞訊息的，所以只要支援 ActivityPub 的 SNS 平臺，比如 Pleroma、MissKey 都可以使用。&lt;/p&gt;
&lt;p&gt;另外鑑於有些人反映 Mastodon 的效率太慢，其實也可以自己製作支援 ActivityPub 的微網誌服務軟體。我之前&lt;a href=&quot;https://github.com/Yoxem/khaikang&quot;&gt;本來想要做一組SNS&lt;/a&gt;，但是發現這個 side-project 會嚴重侵蝕自己的作息控制和身心健康，所以擱置了。&lt;/p&gt;
&lt;p&gt;但是鑑於這個去中心化協定獲得的關注度很高，而網路上幾乎沒有華語的教學，從而沒有辦法百花齊放，推進這個技術的生態圈，洵為可惜，加上自己曾經參與一篇 Timmot 的教學的回饋，所以就用該教學來編譯成華語，希望能夠推動大家對這個協議的興趣。&lt;/p&gt;
&lt;p&gt;如果這個教學有錯誤處請告訴我。另筆者不負責參考本教學執行的後果，還請注意。&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="資訊" scheme="http://yoxem.github.io/tags/%E8%B3%87%E8%A8%8A/"/>
    
    <category term="ActivityPub" scheme="http://yoxem.github.io/tags/ActivityPub/"/>
    
    <category term="Python" scheme="http://yoxem.github.io/tags/Python/"/>
    
    <category term="Django" scheme="http://yoxem.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>曠野ni̍h ê旅客</title>
    <link href="http://yoxem.github.io/2022/07/29/khong&#39;ia-nih-e-lu&#39;kheh/"/>
    <id>http://yoxem.github.io/2022/07/29/khong&#39;ia-nih-e-lu&#39;kheh/</id>
    <published>2022-07-28T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.152Z</updated>
    
    <content type="html"><![CDATA[<p>我是一个曠野裡ê旅客</p><p>跤踏石地　汗流糝滴</p><p>跤ná來ná重</p><p>路愈行愈遠</p><span id="more"></span><p>蜃樓虛影掠做希望</p><p>Eng-ia塗粉斡頭成空</p><p>蠍仔、毒蛇歸四界</p><p>天邊ê獅仔嘛咧哮</p><p>樹ńg，汝佇佗位？</p><p>溪水，久久無見。</p><p>「凡勢有終點tī頭前」</p><p>伴憢疑佮相信</p><p>一步一步</p><p>向日出ê所在</p><p>直到彼一工。</p><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;我是一个曠野裡ê旅客&lt;/p&gt;
&lt;p&gt;跤踏石地　汗流糝滴&lt;/p&gt;
&lt;p&gt;跤ná來ná重&lt;/p&gt;
&lt;p&gt;路愈行愈遠&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="分行散文或詩" scheme="http://yoxem.github.io/tags/%E5%88%86%E8%A1%8C%E6%95%A3%E6%96%87%E6%88%96%E8%A9%A9/"/>
    
    <category term="Holo話" scheme="http://yoxem.github.io/tags/Holo%E8%A9%B1/"/>
    
  </entry>
  
  <entry>
    <title>身心健康和夢想誰輕誰重</title>
    <link href="http://yoxem.github.io/2022/07/25/sinsim-kiankhong-vs-bangsiong/"/>
    <id>http://yoxem.github.io/2022/07/25/sinsim-kiankhong-vs-bangsiong/</id>
    <published>2022-07-25T14:07:26.000Z</published>
    <updated>2023-06-13T02:14:58.152Z</updated>
    
    <content type="html"><![CDATA[<pre><code> 1  身心健康平安和不一定達成的夢想相比是更重要的。     1.1  身心健康是每天的事，夢想是未來的事         1.1.1  人每天都要生活，而生活品質和生理心靈相關         1.1.2  體力的健康影響意志力和專注力的強韌性。             1.1.2.1  專注力不好，心靈的能力會上升             1.1.2.2  生活需要面對風浪，風浪需要強韌的心靈     1.2  夢想不一定會追得到，但需要花很多心力         1.2.1  所謂的夢想，這裏指自己的追求         1.2.2  追求是不一定達成的，要達成往往需要付出代價             1.2.2.1  包含以下興趣嗜好：                 1.2.2.1.1  寫一個軟體專案                 1.2.2.1.2  寫小說                 1.2.2.1.3  學外語                 1.2.2.1.4  甚至創業、副業、寫音樂、練運動技能             1.2.2.2  這些都需要耗費腦力和體力     1.3  人的能力是有限的         1.3.1  英才俊傑一天擁有的時間也不比同時代的人多         1.3.2  體力和腦力會隨時間衰退         1.3.3  體力和腦力需要休養         1.3.4  如果過度操勞會傷害人力     1.4  夢想有時候只是一時的妄想         1.4.1  不代表所有夢想都是妄想         1.4.2  但也可能是一時衝動             1.4.2.1  如果知道是一時衝動前栽入太多，會無謂耗費精力             1.4.2.2  知道是一時衝動的話，那無疑是投注沉沒成本                 1.4.2.2.1  人心常常對沉沒的成本執着     1.5  身心不健康會影響長遠的一生         1.5.1  人會老，身心不健康很可能會讓人生不如死             1.5.1.1  現在公衛水準會讓人活很久             1.5.1.2  但如果自己早衰，早面對疾病，會讓人很痛苦             1.5.1.3  加上現實四面而來的壓力可能讓人陷入無盡深淵                 1.5.1.3.1  身心不健康可能讓人陷入成癮、神經衰弱等等                 1.5.1.3.2  上述不良狀況會讓人身心更不健康，人生更受挫折                 1.5.1.3.3  從而陷入惡性循環         1.5.2  許多慢性疾病和積勞成疾有關             1.5.2.1  除了上述的成癮和神經衰弱問題，還有身體疾病             1.5.2.2  慢性疾病和年老失能有關             1.5.2.3  如果自己的身心獲得足夠的充電和保養，那陷入疾病會比較低     1.6  注意自己的身體心靈         1.6.1  自己的夢想也是給心靈的滿足         1.6.2  但是自我實現的根基是身心         1.6.3  這三個很重要：吃得下飯、睡得下去、笑得出來</code></pre><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt; 1  身心健康平安和不一定達成的夢想相比是更重要的。
     1.1  身心健康是每天的事，夢想是未來的事
         1.1.1  人每天都要生活，而生活品質和生理心靈相關
         1.1.2  體力的健康影響意志力和專注力的強韌性。
</summary>
      
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="生活" scheme="http://yoxem.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="論" scheme="http://yoxem.github.io/tags/%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>Serenity OS</title>
    <link href="http://yoxem.github.io/2022/06/10/SerenityOS/"/>
    <id>http://yoxem.github.io/2022/06/10/SerenityOS/</id>
    <published>2022-06-09T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.140Z</updated>
    
    <content type="html"><![CDATA[<p>　　比起馬克思說的理想生活：「上午打獵，下午捕魚，傍晚從事畜牧，晚飯後從事批判」，能夠自在的從事無益之事更令人羨慕。</p><p>　　最近看到有位工程師全心創作自己的業餘作業系統Serenity OS，甚至最後辭職——雖然這樣的將自己的精力揮霍在明顯糊不了口的事，確實是一種浪費，但他卻還是有人資助，讓他無後顧之憂的創作著的消息。這樣子能夠專心實現自我想要達到的夢，而不至於被這灰暗的紅塵打磨，真是許多創作者的夢想啊。<span id="more"></span></p><p>　　但是現實生活中，卻往往是不可能的。許多的藝術家，常常要面對生活的需求，而只能從事兼職的工作。就像一些獨立樂團的成員，有時需要有另一份工作支撐着其夢想；又或者有許多的作家，當所謂的「文學獎獵人」，在各種文學獎中寫出符合評審口味的作品，來維護其能力與工作。更不用說許多的人，因為生活的庸碌和煎熬，難以充實自我，甚至原本有創作天賦的，也終究荒廢了這項能力，從而連作品都稱不上的也誕生不出。這是人類社會很可惜的地方。</p><p>　　但是，擁有足量生產工具的，纔有可能創造多餘的金錢，換得多餘的時間。像我等被剃毛的綿羊，除非在UBI的烏托邦，或是有人包養，或是活在高福利的國家中，纔有可能獲取這樣的資源創作吧？</p><p>　　或許那些高福利國家中，文化作品的發展也不錯，這會不會也是一種原因？我也不是社會學家，這種疑問我終究無法回答。</p><p>　　但若是有這些時間，我也想要完成業餘的想做的事、想寫的文章……雖然不知道是否只有夢裏才能實現。</p><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;　　比起馬克思說的理想生活：「上午打獵，下午捕魚，傍晚從事畜牧，晚飯後從事批判」，能夠自在的從事無益之事更令人羨慕。&lt;/p&gt;
&lt;p&gt;　　最近看到有位工程師全心創作自己的業餘作業系統Serenity OS，甚至最後辭職——雖然這樣的將自己的精力揮霍在明顯糊不了口的事，確實是一種浪費，但他卻還是有人資助，讓他無後顧之憂的創作著的消息。這樣子能夠專心實現自我想要達到的夢，而不至於被這灰暗的紅塵打磨，真是許多創作者的夢想啊。</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="論" scheme="http://yoxem.github.io/tags/%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>愛爾蘭語的繫詞</title>
    <link href="http://yoxem.github.io/2022/03/05/Gaeilge-e-copula/"/>
    <id>http://yoxem.github.io/2022/03/05/Gaeilge-e-copula/</id>
    <published>2022-03-04T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.140Z</updated>
    
    <content type="html"><![CDATA[<p>最近在個人維基的「我所知道的愛爾蘭語」系列中，增加了一些愛爾蘭語學習時的大魔王——繫詞的介紹。希望對學習者能有所幫助。請參考：</p><ul><li><strong>[<a href="https://kianting.info/wiki/w/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E6%84%9B%E7%88%BE%E8%98%AD%E8%AA%9E/%E6%96%87%E6%B3%95/%E7%B9%AB%E8%A9%9E">https://kianting.info/wiki/w/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E6%84%9B%E7%88%BE%E8%98%AD%E8%AA%9E/%E6%96%87%E6%B3%95/%E7%B9%AB%E8%A9%9E</a> 個人維基內文]</strong></li></ul><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在個人維基的「我所知道的愛爾蘭語」系列中，增加了一些愛爾蘭語學習時的大魔王——繫詞的介紹。希望對學習者能有所幫助。請參考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[&lt;a href=&quot;https://kianting.info/wiki/w/%E6%88%91%E6%</summary>
      
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="愛爾蘭語" scheme="http://yoxem.github.io/tags/%E6%84%9B%E7%88%BE%E8%98%AD%E8%AA%9E/"/>
    
  </entry>
  
  <entry>
    <title>好用的工具，使用於工作上</title>
    <link href="http://yoxem.github.io/2022/02/20/ho&#39;iong&#39;e-ke&#39;si/"/>
    <id>http://yoxem.github.io/2022/02/20/ho&#39;iong&#39;e-ke&#39;si/</id>
    <published>2022-02-19T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.148Z</updated>
    
    <content type="html"><![CDATA[<p><strong>原載於PTT某板</strong></p><ul><li>心智圖是好東西：</li></ul><p>當您要想一篇新聞稿的時候，最好可以先擬大綱，增加後續送核的速度。然後細節可以用<br>開分支來寫。我個人建議用可以快速鍵操作的 FreeMind。</p><ul><li>有些項目符號或是不必要的換行，可以用 Regex101，佐以基礎的正規表達式（比如<br>以數字後加點，代替數字項目符號的括號 ( )），可以用這個表達式：</li></ul><p>修改前 regex 語法：<pre> <a href="%5Cd+">(</a>[)]</pre><br>修改後 regex 語法： <pre>\1.</pre></p><ul><li><p>除非學形碼輸入法，建議可以使用自定義快速鍵+無調注音和用斷頭注音文輸入的<br>程式，這樣不太會浪費時間在出入常用辭的調號。</p></li><li><p>如果電腦是 Windows 10，可以用 WSL2 安裝 Linux 子系統的話，可以用 vim -d<br>比較兩個純文字檔的差異，這樣重新送核能夠快速檢視問題是否修改畢。</p></li></ul><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;原載於PTT某板&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;心智圖是好東西：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當您要想一篇新聞稿的時候，最好可以先擬大綱，增加後續送核的速度。然後細節可以用&lt;br&gt;開分支來寫。我個人建議用可以快速鍵操作的 FreeMind。&lt;/</summary>
      
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="生活" scheme="http://yoxem.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="資訊" scheme="http://yoxem.github.io/tags/%E8%B3%87%E8%A8%8A/"/>
    
  </entry>
  
  <entry>
    <title>我的個人維基和愛爾蘭語詩翻譯</title>
    <link href="http://yoxem.github.io/2022/02/11/gua-e-wiki-kap-ai&#39;ni&#39;lan&#39;gi-si-huan&#39;ik/"/>
    <id>http://yoxem.github.io/2022/02/11/gua-e-wiki-kap-ai&#39;ni&#39;lan&#39;gi-si-huan&#39;ik/</id>
    <published>2022-02-10T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.148Z</updated>
    
    <content type="html"><![CDATA[<p>最近了一個網路空間，把一些筆記那種類似「知識庫」的東西，放在這個網路空間的維基，主要包含愛爾蘭語以及電腦科學等等的知識庫（雖然已經開了一段時間了），還有一些讀書心得等等的。</p><p>並且將愛爾蘭語的一首 Mo Ghile Mear（我英勇心上人）的全詩翻譯，放在這裏面。</p><p>請參考：<a href="https://kianting.info/wiki/index.php?title=%E6%88%91%E8%8B%B1%E5%8B%87%E7%9A%84%E5%96%9C%E6%84%9B">https://kianting.info/wiki/index.php?title=%E6%88%91%E8%8B%B1%E5%8B%87%E7%9A%84%E5%96%9C%E6%84%9B</a></p><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近了一個網路空間，把一些筆記那種類似「知識庫」的東西，放在這個網路空間的維基，主要包含愛爾蘭語以及電腦科學等等的知識庫（雖然已經開了一段時間了），還有一些讀書心得等等的。&lt;/p&gt;
&lt;p&gt;並且將愛爾蘭語的一首 Mo Ghile Mear（我英勇心上人）的全詩翻譯，放在這裏面</summary>
      
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="愛爾蘭語" scheme="http://yoxem.github.io/tags/%E6%84%9B%E7%88%BE%E8%98%AD%E8%AA%9E/"/>
    
  </entry>
  
  <entry>
    <title>Wikipedia Library</title>
    <link href="http://yoxem.github.io/2022/02/04/wiki&#39;pik&#39;kho-library/"/>
    <id>http://yoxem.github.io/2022/02/04/wiki&#39;pik&#39;kho-library/</id>
    <published>2022-02-03T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.156Z</updated>
    
    <content type="html"><![CDATA[<p>最近維基百科有一個訊息資訊，講一些學術出版公司和維基百科合作，讓符合一定資格的用戶可以查閱一些學術期刊的內容。</p><p>基本資格為（但非所有資料庫都能看）：</p><ul><li>編輯次數500次以上</li><li>有6個月之前的編輯活動</li><li>在上個月編輯數有10次以上</li><li>沒有生效的封鎖</li></ul><span id="more"></span><p>合作單位包含：JSTOR和MIT出版社等等。</p><p>領域包含語言學、還有社會科學，資料很多。</p><p>會英文的可以參考。</p><p>網站：<a href="https://wikipedialibrary.wmflabs.org/">https://wikipedialibrary.wmflabs.org/</a></p><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近維基百科有一個訊息資訊，講一些學術出版公司和維基百科合作，讓符合一定資格的用戶可以查閱一些學術期刊的內容。&lt;/p&gt;
&lt;p&gt;基本資格為（但非所有資料庫都能看）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;編輯次數500次以上&lt;/li&gt;
&lt;li&gt;有6個月之前的編輯活動&lt;/li&gt;
&lt;li&gt;在上個月編輯數有10次以上&lt;/li&gt;
&lt;li&gt;沒有生效的封鎖&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="維基百科" scheme="http://yoxem.github.io/tags/%E7%B6%AD%E5%9F%BA%E7%99%BE%E7%A7%91/"/>
    
  </entry>
  
  <entry>
    <title>雜錯之語二篇（速記與對話的因子，與科技要不要做影響評估分析）</title>
    <link href="http://yoxem.github.io/2022/01/19/tsap&#39;tsho-e-ue-nng-phinn/"/>
    <id>http://yoxem.github.io/2022/01/19/tsap&#39;tsho-e-ue-nng-phinn/</id>
    <published>2022-01-18T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="速記與對話的因子"><a href="#速記與對話的因子" class="headerlink" title="速記與對話的因子"></a>速記與對話的因子</h3><p>速記是一種在前錄音設施時代使用的記錄對話的方法，以筆畫的形狀、方向和位置來表示音素，從而追趕快速的對話中出現的音素，再轉成音素對應的文字。而除了使用音素的記號以外，有些常出現的字詞也會用別的縮寫代替，簡省記載的空間和時間。</p><p>它本身就是在會議或是法庭等等記錄所產生的工具，反映出人們對於重要的會議對話或是發言，想要記載得更好的想法。但要如何詳細的記錄一個會議的對話？可以分成幾個層面：首先是語言的表面語義，就是一句話表面呈現的意思，就像「小明吃地瓜」的語義是：「一個叫小明的人或是物將番薯這種植物放進他的消化系統裏」，這可以用語音轉文字處理。<span id="more"></span></p><p>但是對話也有聲調，聲調也爲對話附加了背後的含義，比如一些感情的表達，是依附在聲調上的。若是沒有聲調，會讓人無法瞭解發言者的感情，而用自己的觀點推敲這句話是否為讚美、反諷，或是情緒的抒發等等。同樣的，還有肢體語言、臉部表情，這些也是影響發言表示意思的潛藏因子。對於記載這些因子，可以用錄音和錄影輔助。</p><p>可是另外一面，就算知道對話語義和那些非語言的表達因子，還是有可能會不知道對話的詳盡意義是什麼。而若是對話裏出現大家不說卻有共識的某個資訊，而記錄者不知道的話，也會造成對話過程的遺漏。比如說，討論的人們精通討論用語，且討論中使用雙關修辭，但是記錄者是非討論用語母語者，那可能會不知道這句雙關語的意思。</p><h3 id="科技要不要做影響評估分析？"><a href="#科技要不要做影響評估分析？" class="headerlink" title="科技要不要做影響評估分析？"></a>科技要不要做影響評估分析？</h3><p>現在的科技，雖然導致人們生活的樂趣大爲增加，但是也導致資源的濫用，或是影響社會成員的行爲，個人權利的維護（比如個人資訊的處理使用權）也有了隱憂。有些人也針對這種社會問題進行如「監控資本主義」的批判，或是進行對數位巨頭抵制。</p><p>之所以這樣，或許可以從科技起源的源頭來看。通常一個科技的發明，是因為人們想要解決問題而產生的。就像爲了更快速的載運城際旅客，高鐵這種技術被研發出來。當研發一種科技或產品的時候，往往社會（或部分人）會瀰漫着一股樂觀的觀點，比如「比特幣開發出來以後，就一定能夠避免政府掌握金融導致的問題」，當然這些樂觀的人包含開發方——假設對科技研發的結果不樂觀的話，那研發團隊爲什麼要自討苦吃呢？</p><p>但是，科技往往也會有不良的副作用，就像菜刀可以助人獲得一餐，也可以讓人失去生命。比如說運輸科技的發展，導致廢棄物惡意棄置在以前很難到達的地方；傳播科技的發展，也能夠讓強勢者的語言在弱勢語言的社羣出現的頻率更高，從而影響了既有的語言環境。也因此有人對科技的發展，抱持着懷疑或審慎的態度，甚至出現了新盧德主義，反對科技的發展。</p><p>當前全世界對科技發展的追求仍然沒有停下來的趨勢，指望科技發展阻絕也沒辦法。而在支持科技自由發展使用和完全禁絕之間，是不是有另一條可行的方法？就像地區的大型建設，需要環境影響評估，以全面性的分析並提出因應方案，來減少對週邊的影響般，新科技的使用，是否也該學習做這樣的分析呢？</p><p>環境影響評估，是依法規定，且對環境有不良影響之虞的開發行爲需要做的，照樣，若是一個科技的發明和使用，對牽涉到其生產、使用、回收、運輸等等的社會有不良影響，應該要有一個評估分析，及管理其使用的機制。比如說真正的腦機介面設備若是準備要大量上市，應該要先分析使用的人有哪些，生產影響的人有哪些，並且預估這套設備若是大量使用，會不會造成使用者得到疾病？會不會造成對人腦連接機器的相關機器裝置的過度依賴？對沒有使用的人，會不會構成因為無法接到電腦系統處理，從而無法使用該系統的歧視問題？然後藉由專家學者和該案所涉公民的討論，釐清問題與尋求解決方向，並進行後續的定期追蹤，從而將科技帶給社會的潛在負面影響，在執行前儘量控制。</p><p>雖然有些人可能認爲，科技影響的層面太廣泛了，無法確認對社會的影響範圍寬窄，而且社會未來的發展方向人們無法測度，現在直接推論評估科技的影響也不一定真的符合未來的情形變化趨勢。但是這可能可以靠分析同類型科技對社會諸多層面的個別影響範圍，從而決定評估的項目，讓評估更符合需求。另外也可以藉由過去類似案件的發展模式——比如說電動機車引入臺灣後的市場佔有變化，來估計某個新興個人交通工具未來的可能影響範圍。</p><p>現在科技的發展仍在高速進行，絕大多數人身處這股潮流中。但是面對科技帶來的腫腫的問題，如果現在不好好想出評估的機制，人們終究在下一個科技的美夢中，吞着上一個科技的苦果。</p><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;速記與對話的因子&quot;&gt;&lt;a href=&quot;#速記與對話的因子&quot; class=&quot;headerlink&quot; title=&quot;速記與對話的因子&quot;&gt;&lt;/a&gt;速記與對話的因子&lt;/h3&gt;&lt;p&gt;速記是一種在前錄音設施時代使用的記錄對話的方法，以筆畫的形狀、方向和位置來表示音素，從而追趕快速的對話中出現的音素，再轉成音素對應的文字。而除了使用音素的記號以外，有些常出現的字詞也會用別的縮寫代替，簡省記載的空間和時間。&lt;/p&gt;
&lt;p&gt;它本身就是在會議或是法庭等等記錄所產生的工具，反映出人們對於重要的會議對話或是發言，想要記載得更好的想法。但要如何詳細的記錄一個會議的對話？可以分成幾個層面：首先是語言的表面語義，就是一句話表面呈現的意思，就像「小明吃地瓜」的語義是：「一個叫小明的人或是物將番薯這種植物放進他的消化系統裏」，這可以用語音轉文字處理。</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="論" scheme="http://yoxem.github.io/tags/%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>關於計算尺的介紹</title>
    <link href="http://yoxem.github.io/2022/01/17/iu&#39;kuan-ke&#39;sng&#39;tshioh-e-kai&#39;siau/"/>
    <id>http://yoxem.github.io/2022/01/17/iu&#39;kuan-ke&#39;sng&#39;tshioh-e-kai&#39;siau/</id>
    <published>2022-01-16T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.148Z</updated>
    
    <content type="html"><![CDATA[<p><em>（原於 2022-01-17 張貼於 PTT Stationary（文具）板，後轉到 Math（數學）板）</em></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>最近因為好奇前電腦時代的運算方式之一，計算尺，所以買了兩隻計算尺。（一隻富士另一隻輝柏）</p><p>計算尺的原理是，採用 x * y 可以換成 log(x) + log(y) 的原理，將對數間距的刻度，印在兩隻固定，但其中一隻可平行滑動的尺上，利用尺的滑動與刻度的對照，來進行數字的乘除。這是在電腦發明以前的一種計算數字的方式，當然這有一點像是高階的查圖（表）的對應數值計算方式。<span id="more"></span></p><p>現在我手上有的計算尺，是三根平行的尺併在一起，上下兩根固定，中間的可以左右滑動。尺子被透明的，印有垂直細線，且可左右滑動的塑膠殼固定，用來輔助比對子尺之間的刻度用。</p><p>當然，因為對數的限定，所以越大的數，刻度的誤差值會變大。</p><h2 id="刻度介紹"><a href="#刻度介紹" class="headerlink" title="刻度介紹"></a>刻度介紹</h2><p>以我目前有的 Faber-Castell 2&#x2F;83N 爲例（底下是該計算尺的模擬器，中間的子尺可以拖動）：</p><p><a href="https://www.sliderules.org/react/faber_castell_2_83n.html">https://www.sliderules.org/react/faber_castell_2_83n.html</a></p><p>可以看比較基礎運算的的 C、D 刻度，刻度的間距並不相同，反映這隻尺的間距不是照等差尺度排列的。</p><p>以下數字均爲十進位</p><p>假設要計算 32 * 19 這個數字，首先將被乘數 a 和乘數 b 換成 a’ * b’ * 10^(a的位數-1 + b 的位數 - 1)，其中 a’ 和 b’ 介於 [1,10) 之間。</p><p>雖然這個公式比較複雜，但是重點就是，要把被乘數 a 和乘數 b 的小數點移位成介於 1 到 10 的數，且要記得兩數的小數點移多少位，到時計算要補回來。</p><p>這裏要換成 3.2 * 1.9 * 10 ^ 2</p><p>（以下建議大家開計算尺的模擬器，以確知如何運作）</p><p>所以我們要得知 3.2 * 1.9 的結果。</p><p>然後把C尺左右平移，1刻度移到D尺的3.2的位置，這時候讀C尺1.9的位置，對應到D尺的什麼刻度呢？</p><p>我們可以看到大致對應到刻度 6.05~6.10 中間，和計算結果 608（記得將小數點往右移回2位）很接近。</p><p>如果是除法的話。比如說 72 &#x2F; 6 ，那我們可以先換成 7.2 &#x2F; 6 * 10。</p><p>將 C 尺的 7.2 刻度和 D 尺的 6 刻度重合，然後回頭看 D 尺的 1 對應到 C 尺的什麼刻度呢？</p><p>對應的結果是 1.2，再乘以 10，就得到答案 12 了。</p><p>進階用法的還可以算三角函數、平方根，圓周率的乘除等等。</p><p>但感覺比較高深，這裏就不細說了。</p><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;（原於 2022-01-17 張貼於 PTT Stationary（文具）板，後轉到 Math（數學）板）&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;最近因為好奇前電腦時代的運算方式之一，計算尺，所以買了兩隻計算尺。（一隻富士另一隻輝柏）&lt;/p&gt;
&lt;p&gt;計算尺的原理是，採用 x * y 可以換成 log(x) + log(y) 的原理，將對數間距的刻度，印在兩隻固定，但其中一隻可平行滑動的尺上，利用尺的滑動與刻度的對照，來進行數字的乘除。這是在電腦發明以前的一種計算數字的方式，當然這有一點像是高階的查圖（表）的對應數值計算方式。</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="數學" scheme="http://yoxem.github.io/tags/%E6%95%B8%E5%AD%B8/"/>
    
    <category term="文具" scheme="http://yoxem.github.io/tags/%E6%96%87%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>我的打字機之旅（主要提Brother 300）</title>
    <link href="http://yoxem.github.io/2021/12/26/gua&#39;e-phah&#39;gi&#39;ki-tsi&#39;li/"/>
    <id>http://yoxem.github.io/2021/12/26/gua&#39;e-phah&#39;gi&#39;ki-tsi&#39;li/</id>
    <published>2021-12-25T16:00:00.000Z</published>
    <updated>2023-06-13T02:14:58.148Z</updated>
    
    <content type="html"><![CDATA[<p><strong>（原於同日刊於 PTT 文具 [stationery] 板）</strong><br><strong>（更新日期：2023-02-22）</strong></p><p><em>（文長注意，使用 Markdown 格式）</em></p><p>我小時候雖然有玩過家父因大專時課業需要而買來練英打的打字機，但後來不知所終，所以一直以來用電腦或是所寫。</p><p>但最近鑑於自己覺得電腦使用頻率過高，且有點想要練習英語的使用，打算使用打字機作爲文字處理工具，也自己到網路上搜尋有沒有相關的資訊。<span id="more"></span></p><h2 id="仍生產打字機的廠商"><a href="#仍生產打字機的廠商" class="headerlink" title="仍生產打字機的廠商"></a>仍生產打字機的廠商</h2><p>根據最搜尋到的 Fox News 報導，目前還正生產打字機的店家，美國有 Swintec（電動），他們是美國政府採購廠商，透明外殼打字機給監獄使用（爲了避免夾帶違禁品），在亞太地區有生產據點，也有可網購的網站。</p><p>此外，中國媒體有報導，上海一帶有「派順」生產打字機。以前不知道網址，但經過國外網友的回報，這個網站可能是他們的：<a href="https://chinatypewriter.en.alibaba.com/index.html">Shanghai Weilv Mechanism Company</a>，雖然公司名不同。不知道有沒有自有品牌。</p><h2 id="購買打字機的心得"><a href="#購買打字機的心得" class="headerlink" title="購買打字機的心得"></a>購買打字機的心得</h2><p>經過經久尋覓與嘗試，手動打字機有些採買的心得：</p><ul><li>務必放一張A4紙，測試：<ul><li>滾筒與捲紙功能是否正常。</li><li>空白鍵、以及特殊符號能不能用。</li><li>全大寫和全小寫的 “the quick brown fox jumps over the lazy dog.”<br> -　如果是非面交，且賣方允許的話，建議拍攝測試影片或照片。</li></ul></li><li>如果賣方發現有問題，就不要下單。</li></ul><p>因為想要買一臺電動打字機，來瞭解其機制，又希望能夠有還再運作的技術支援，我和 Swintec 這邊的網站有下單，但是貌似無法直接寄到臺灣（雖然應該不是美國禁運品），只能夠找美國有轉運點的代寄公司。</p><p>不過他們的銷售人員似乎怕我買的不透明外殼打字機是給監獄的，還去信和我確認。後來因為一些緣故取消下訂了。</p><p>另外他們的地址選單，有出現香港和中國，但沒有臺灣。這點我已經反映了。</p><h2 id="使用打字機的心得"><a href="#使用打字機的心得" class="headerlink" title="使用打字機的心得"></a>使用打字機的心得</h2><h3 id="手動-Brother-300"><a href="#手動-Brother-300" class="headerlink" title="手動 Brother 300"></a>手動 Brother 300</h3><p>現在這臺手動打字機，是在某網拍網站找到生活範圍附近有人賣日本 Brother 300（形狀照片可以找網拍二手店家搜尋得知），面交而得。</p><p>年代我沒問，但網路上有別的賣家說 1978 年就有此型號，另有說此型號儲藏二十年以上，可以推測應該是 1980s-1990s。</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>基本上下列功能正常：</p><ul><li>大小寫、符號</li><li>→退位</li><li>↔右邊界溢位</li><li>左下右下白鍵（無印，Shift）</li><li>左邊中間偏下的白鍵（無印，Caps Lock）</li><li>右側調整「紅、白、黑」的扳柄：<ul><li>因為是黑色單色帶，所以切到紅、黑則顯示黑色</li><li>切到白色時，打字時不會打到色帶，只會留下「活字頭」的壓痕。</li></ul></li><li>左邊的 H - L 扳柄：Reddit r&#x2F;typewriter 板說可以調節清晰度，但可能是色帶舊，感覺不明顯。</li><li>前方滾筒的右邊的水平方向移動扳柄：可用</li><li>左前方換行</li><li>左前方行距（1、1&#x2F;2、2）：我目前只用 1 和 2，使用時正常。</li></ul><h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4><p>雖然目前用起來功能正常，但還是有一些問題：</p><ul><li>符號太少：這樣無法打某些語言（如法語）的許多附加符號 (diacritic)。但因為我使用白話字&#x2F;臺羅，不可避免會用到許多附加符號，以致只能在音節後面，以聲調數字編號表示聲調，不美觀。或許可能要嘗試越南語打字機？</li><li>打太大力的關係吧，發現色帶有一次脫離印字頭前面的左邊的束勾。</li></ul><h4 id="備考"><a href="#備考" class="headerlink" title="備考"></a>備考</h4><ul><li>之後會買色帶用用看。網拍上有看到據說是通用型的傳統打字機色帶，檢查一下尺寸大致符合，就下單試試看。</li></ul><h4 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h4><p>沒圖沒真相，附上測試成果，在 Google 相簿裏面：</p><p><a href="https://photos.app.goo.gl/bfVYPwuRjfU3aXRy6">https://photos.app.goo.gl/bfVYPwuRjfU3aXRy6</a></p><h3 id="電動打字機-Swintec-Electic-Typewriter-2410"><a href="#電動打字機-Swintec-Electic-Typewriter-2410" class="headerlink" title="電動打字機 Swintec Electic Typewriter 2410"></a>電動打字機 Swintec Electic Typewriter 2410</h3><p>還正下訂流程中，所以暫無資料XD。</p><h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><ol><li>有人在大雅有從事打字機維修，身爲中部人，或許以後可以問看看。</li><li>不知道 WikiHow 的 How to Clean a Typewriter（機械式打字機清潔說明）有沒有用？<ul><li>網址：<a href="https://www.wikihow.com/Clean-a-Typewriter">https://www.wikihow.com/Clean-a-Typewriter</a></li><li>裏面提到白醋、洗碗劑、壓縮空氣屏、刷子、machineary oil、擦拭用酒精 (rubbing alcohol)、香蕉水 (lacquer thinner)、吸塵裝置 (vacuum)。</li></ul></li></ol><script type="text/javascript"> var head = document.getElementsByTagName("head"); var link_css = document.createElement('style'); link_css.setAttribute('type', 'text/css'); link_css.innerHTML = ' .css-table1{ display: table; border: none;} .css-tr1{ display:table-row; } .css-td1{ display: table-cell; padding-right: 1ex; }'; document.getElementsByTagName('head')[0].appendChild(link_css);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;（原於同日刊於 PTT 文具 [stationery] 板）&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;（更新日期：2023-02-22）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（文長注意，使用 Markdown 格式）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我小時候雖然有玩過家父因大專時課業需要而買來練英打的打字機，但後來不知所終，所以一直以來用電腦或是所寫。&lt;/p&gt;
&lt;p&gt;但最近鑑於自己覺得電腦使用頻率過高，且有點想要練習英語的使用，打算使用打字機作爲文字處理工具，也自己到網路上搜尋有沒有相關的資訊。</summary>
    
    
    
    <category term="Blog" scheme="http://yoxem.github.io/categories/Blog/"/>
    
    
    <category term="打字機" scheme="http://yoxem.github.io/tags/%E6%89%93%E5%AD%97%E6%A9%9F/"/>
    
  </entry>
  
</feed>
